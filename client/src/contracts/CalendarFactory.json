{
  "address": "0x03BB11130745CDE3a959e24213232F3fD5aB3482",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "calAddressArray",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "calendar",
      "outputs": [
        {
          "internalType": "address",
          "name": "calendarAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "calendarAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "calendarName",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_calendarName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_calendarAdmin",
          "type": "address"
        }
      ],
      "name": "createTelosCalendar",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "calendarAddress",
          "type": "address"
        }
      ],
      "name": "getCalendar",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCalendarAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xafb56342f544da053cf1e56d38ea48f7818ee2a9e8857d6685e930fa9b558810",
  "receipt": {
    "to": null,
    "from": "0x8406A51A0E1B5F52Ff61226773e6328e5Da5d964",
    "contractAddress": "0x03BB11130745CDE3a959e24213232F3fD5aB3482",
    "transactionIndex": 0,
    "gasUsed": "5327219",
    "logsBloom": "0x
    "blockHash": "0x7700f75e1d310c1393885352a253873b5215f241e3efa8d04b1acc3bf9897582",
    "transactionHash": "0xafb56342f544da053cf1e56d38ea48f7818ee2a9e8857d6685e930fa9b558810",
    "logs": [],
    "blockNumber": 248439524,
    "cumulativeGasUsed": "5327219",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9fddb02ac4ca911526bd4099bab21cd9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"calAddressArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"calendar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"calendarAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"calendarAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"calendarName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_calendarName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_calendarAdmin\",\"type\":\"address\"}],\"name\":\"createTelosCalendar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"calendarAddress\",\"type\":\"address\"}],\"name\":\"getCalendar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCalendarAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CalendarFactory.sol\":\"CalendarFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/CalendarDailyTelos.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport './CalendarFactory.sol';\\r\\n\\r\\n\\r\\ncontract CalendarDailyTelos is AccessControl {\\r\\n    string public calendarName;\\r\\n    address public calendarAdmin;\\r\\n    CalendarFactory private _factory;\\r\\n    bytes32 public constant MEMBER_ROLE = keccak256(\\\"MEMBER_ROLE\\\");\\r\\n    bytes32 public constant GUEST_ROLE = keccak256(\\\"GUEST_ROLE\\\");\\r\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\r\\n    address[] public users; \\r\\n    address[] public eventCreators;\\r\\n    uint public totalEvents; \\r\\n    uint public adminCount;\\r\\n    uint public memberCount; \\r\\n    uint public guestCount;\\r\\n    mapping(address => Invitation) public userInvitations;\\r\\n    mapping(address => Guest) public guests;\\r\\n    mapping(address => Member) public members;\\r\\n    mapping(address => Admin) public admins;\\r\\n    mapping(uint => CalendarEvent) public eventsById;\\r\\n    mapping(address => CalendarEvent[]) public userEvents;\\r\\n    mapping(address => CalendarEvent[]) public guestEvents;\\r\\n    mapping(address => CalendarEvent[]) public adminEvents;\\r\\n    mapping(address => CalendarEvent[]) public memberEvents; \\r\\n    mapping(address => uint) public eventCount; \\r\\n    mapping(uint => address[]) public eventInvitations; \\r\\n    event UserInvited(uint indexed eventID, string title, address invitedUser);\\r\\n    event NewEventCreated(uint indexed eventID, string title, address indexed organizer, uint startTime, uint endTime, string metadataURI, uint timestamp, bytes32 role);\\r\\n    \\r\\n \\r\\n\\r\\n    struct CalendarEvent {\\r\\n        uint eventId; \\r\\n        string title; \\r\\n        address organizer; \\r\\n        uint startTime;\\r\\n        uint endTime;\\r\\n        uint created; \\r\\n        string metadataURI; \\r\\n        address[] invitedAttendees; \\r\\n        address[] confirmedAttendees; \\r\\n    }\\r\\n\\r\\n    struct Admin {\\r\\n        address addr;\\r\\n        uint[] eventIds;\\r\\n    }\\r\\n   \\r\\n    struct Member {\\r\\n        address addr;\\r\\n        uint[] eventIds;\\r\\n    }\\r\\n\\r\\n    struct Guest {\\r\\n        address addr;\\r\\n        uint[] eventIds;\\r\\n    }\\r\\n\\r\\n    struct Invitation {\\r\\n          address userAddress;\\r\\n          uint[] eventIDs;\\r\\n    }\\r\\n\\r\\n    \\r\\n    constructor(string memory _calendarName, address _calendarAdmin) {\\r\\n        calendarName = _calendarName;\\r\\n        calendarAdmin = _calendarAdmin;\\r\\n        _factory = CalendarFactory(_calendarAdmin);\\r\\n        _setupRole(ADMIN_ROLE, _calendarAdmin); \\r\\n        _setupRole(MEMBER_ROLE, _calendarAdmin);\\r\\n        _setupRole(ADMIN_ROLE, address(this));\\r\\n        memberCount = 1;\\r\\n        guestCount = 0;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyMember() {\\r\\n        require(hasRole(MEMBER_ROLE, msg.sender), \\\"Caller is not a member\\\");\\r\\n        _;\\r\\n    } \\r\\n\\r\\n    function revokeRole(bytes32 role, address account) public override onlyAdmin {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\r\\n        super.revokeRole(role, account);\\r\\n        if (!hasRole(ADMIN_ROLE, account) && hasRole(MEMBER_ROLE, account)) {\\r\\n            revokeRole(MEMBER_ROLE, account);\\r\\n            delete members[account];\\r\\n            memberCount--;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function grantRole(bytes32 role, address account) public override onlyAdmin {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\r\\n        super.grantRole(role, account);\\r\\n        if (role == MEMBER_ROLE) {\\r\\n            members[account] = Member({\\r\\n                addr: account,\\r\\n                eventIds: new uint[](0)\\r\\n            });\\r\\n            memberCount++;\\r\\n        } else if (role == GUEST_ROLE) {\\r\\n            guestCount++;\\r\\n        } \\r\\n    }\\r\\n\\r\\n    function addMember(address memberAddress) public onlyAdmin {\\r\\n        _setupRole(MEMBER_ROLE, memberAddress);\\r\\n        members[memberAddress] = Member({\\r\\n            addr: memberAddress,\\r\\n            eventIds: new uint[](0)\\r\\n        });\\r\\n        memberCount++;\\r\\n        if (!hasRole(GUEST_ROLE, memberAddress)) {\\r\\n            _setupRole(GUEST_ROLE, memberAddress);\\r\\n            guests[memberAddress] = Guest({\\r\\n                addr: memberAddress,\\r\\n                eventIds: new uint[](0)\\r\\n            });\\r\\n            guestCount++;\\r\\n        }\\r\\n        bool userExists = false;\\r\\n        for (uint i = 0; i < users.length; i++) {\\r\\n            if (users[i] == memberAddress) {\\r\\n                userExists = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (!userExists) {\\r\\n            users.push(memberAddress);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addMembers(address[] memory memberAddresses) public onlyAdmin {\\r\\n    for (uint i = 0; i < memberAddresses.length; i++) {\\r\\n        address memberAddress = memberAddresses[i];\\r\\n        _setupRole(MEMBER_ROLE, memberAddress);\\r\\n        members[memberAddress] = Member({\\r\\n            addr: memberAddress,\\r\\n            eventIds: new uint[](0)\\r\\n        });\\r\\n        memberCount++;\\r\\n\\r\\n        if (!hasRole(GUEST_ROLE, memberAddress)) {\\r\\n            _setupRole(GUEST_ROLE, memberAddress);\\r\\n            guests[memberAddress] = Guest({\\r\\n                addr: memberAddress,\\r\\n                eventIds: new uint[](0)\\r\\n            });\\r\\n            guestCount++;\\r\\n        }\\r\\n\\r\\n        bool userExists = false;\\r\\n        for (uint j = 0; j < users.length; j++) {\\r\\n            if (users[j] == memberAddress) {\\r\\n                userExists = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (!userExists) {\\r\\n            users.push(memberAddress);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n function addAdmins(address[] memory adminAddresses) public onlyAdmin {\\r\\n    for (uint i = 0; i < adminAddresses.length; i++) {\\r\\n        address adminAddress = adminAddresses[i];\\r\\n        _setupRole(ADMIN_ROLE, adminAddress);\\r\\n        admins[adminAddress] = Admin({\\r\\n            addr: adminAddress,\\r\\n            eventIds: new uint[](0)\\r\\n        });\\r\\n        adminCount++;\\r\\n\\r\\n        if (!hasRole(MEMBER_ROLE, adminAddress)) {\\r\\n            _setupRole(MEMBER_ROLE, adminAddress);\\r\\n            members[adminAddress] = Member({\\r\\n                addr: adminAddress,\\r\\n                eventIds: new uint[](0)\\r\\n            });\\r\\n            memberCount++;\\r\\n        }\\r\\n\\r\\n        bool userExists = false;\\r\\n        for (uint j = 0; j < users.length; j++) {\\r\\n            if (users[j] == adminAddress) {\\r\\n                userExists = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (!userExists) {\\r\\n            users.push(adminAddress);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n    function addGuest(address guestAddress) public {\\r\\n        _setupRole(GUEST_ROLE, guestAddress);\\r\\n        guests[guestAddress] = Guest({\\r\\n            addr: guestAddress,\\r\\n            eventIds: new uint[](0)\\r\\n        });\\r\\n        guestCount++;\\r\\n        bool userExists = false;\\r\\n        for (uint i = 0; i < users.length; i++) {\\r\\n            if (users[i] == guestAddress) {\\r\\n                userExists = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (!userExists) {\\r\\n            users.push(guestAddress);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeMember(address memberAddress) public onlyAdmin {\\r\\n        revokeRole(MEMBER_ROLE, memberAddress);\\r\\n        delete members[memberAddress];\\r\\n        memberCount--;\\r\\n    }\\r\\n\\r\\n   function getEventById(uint eventId) public view returns (CalendarEvent memory) {\\r\\n    for (uint i = 0; i < eventCreators.length; i++) {\\r\\n        CalendarEvent[] storage events;\\r\\n        if (hasRole(MEMBER_ROLE, eventCreators[i])) {\\r\\n            events = memberEvents[eventCreators[i]];\\r\\n        } else if (hasRole(GUEST_ROLE, eventCreators[i])) {\\r\\n            events = guestEvents[eventCreators[i]];\\r\\n        } else if (hasRole(ADMIN_ROLE, eventCreators[i])) {\\r\\n            events = adminEvents[eventCreators[i]];\\r\\n        } else {\\r\\n            continue;\\r\\n        }\\r\\n        for (uint j = 0; j < events.length; j++) {\\r\\n            if (events[j].eventId == eventId) {\\r\\n                return events[j];\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    revert(\\\"Event not found\\\");\\r\\n}\\r\\n\\r\\n\\r\\n    function getAdminEvents(address adminAddress) public view onlyAdmin returns (CalendarEvent[] memory) {\\r\\n        return adminEvents[adminAddress];\\r\\n    }\\r\\n\\r\\n    function getMemberEvents(address memberAddress) public view onlyMember returns (CalendarEvent[] memory) {\\r\\n        return memberEvents[memberAddress];\\r\\n    }\\r\\n\\r\\n    function getGuestEvents(address guestAddress) public view returns (CalendarEvent[] memory) {\\r\\n        require(hasRole(GUEST_ROLE, guestAddress), \\\"Caller is not a guest\\\");\\r\\n        return guestEvents[guestAddress];\\r\\n    }\\r\\n\\r\\n    function getAllEvents() public view returns (CalendarEvent[] memory) {\\r\\n        CalendarEvent[] memory memberEvents = getAllMemberEvents();\\r\\n        CalendarEvent[] memory guestEvents = getAllGuestEvents();\\r\\n        CalendarEvent[] memory adminEvents = getAllAdminEvents();\\r\\n        uint totalEvents = memberEvents.length + guestEvents.length + adminEvents.length;\\r\\n        CalendarEvent[] memory allEvents = new CalendarEvent[](totalEvents);\\r\\n        uint currentIndex = 0;\\r\\n        for (uint i = 0; i < memberEvents.length; i++) {\\r\\n                allEvents[currentIndex] = memberEvents[i];\\r\\n                currentIndex++;\\r\\n        }\\r\\n        for (uint i = 0; i < guestEvents.length; i++) {\\r\\n                allEvents[currentIndex] = guestEvents[i];\\r\\n                currentIndex++;\\r\\n        }\\r\\n        for (uint i = 0; i < adminEvents.length; i++) {\\r\\n            allEvents[currentIndex] = adminEvents[i];\\r\\n            currentIndex++;\\r\\n        }\\r\\n        return allEvents;\\r\\n    }\\r\\n\\r\\n    function getAllMemberEvents() public view returns (CalendarEvent[] memory) {\\r\\n        uint totalMemberEvents = 0;\\r\\n        address[] memory memberAddresses = new address[](users.length);\\r\\n        uint memberCount = 0;\\r\\n        for (uint i = 0; i < users.length; i++) {\\r\\n            if (hasRole(MEMBER_ROLE, users[i])) {\\r\\n                memberAddresses[memberCount] = users[i];\\r\\n                memberCount++;\\r\\n                totalMemberEvents += memberEvents[users[i]].length;\\r\\n            }\\r\\n        }\\r\\n        CalendarEvent[] memory allMemberEvents = new CalendarEvent[](totalMemberEvents);\\r\\n        uint currentIndex = 0;\\r\\n            for (uint i = 0; i < memberCount; i++) {\\r\\n            for (uint j = 0; j < memberEvents[memberAddresses[i]].length; j++) {\\r\\n                allMemberEvents[currentIndex] = memberEvents[memberAddresses[i]][j];\\r\\n                currentIndex++;\\r\\n            }\\r\\n        }\\r\\n        return allMemberEvents;\\r\\n    }\\r\\n\\r\\n    function getAllGuestEvents() public view returns (CalendarEvent[] memory) {\\r\\n        uint totalGuestEvents = 0;\\r\\n        address[] memory guestAddresses = new address[](users.length);\\r\\n        uint guestCount = 0;\\r\\n        for (uint i = 0; i < users.length; i++) {\\r\\n        if (hasRole(GUEST_ROLE, users[i])) {\\r\\n            guestAddresses[guestCount] = users[i];\\r\\n            guestCount++;\\r\\n            totalGuestEvents += guestEvents[users[i]].length;\\r\\n                }\\r\\n            }\\r\\n        CalendarEvent[] memory allGuestEvents = new CalendarEvent[](totalGuestEvents);\\r\\n        uint currentIndex = 0;\\r\\n        for (uint i = 0; i < guestCount; i++) {\\r\\n            for (uint j = 0; j < guestEvents[guestAddresses[i]].length; j++) {\\r\\n                allGuestEvents[currentIndex] = guestEvents[guestAddresses[i]][j];\\r\\n                currentIndex++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return allGuestEvents;\\r\\n    }\\r\\n\\r\\n    function getAllAdminEvents() public view returns (CalendarEvent[] memory) {\\r\\n          uint totalAdminEvents = 0;\\r\\n        address[] memory adminAddresses = new address[](users.length);\\r\\n        uint adminCount = 0;\\r\\n        for (uint i = 0; i < users.length; i++) {\\r\\n            if (hasRole(ADMIN_ROLE, users[i])) {\\r\\n                adminAddresses[adminCount] = users[i];\\r\\n                adminCount++;\\r\\n                totalAdminEvents += adminEvents[users[i]].length;\\r\\n            }\\r\\n          }\\r\\n        CalendarEvent[] memory allAdminEvents = new CalendarEvent[](totalAdminEvents);\\r\\n         uint currentIndex = 0;\\r\\n            for (uint i = 0; i < adminCount; i++) {\\r\\n            for (uint j = 0; j < adminEvents[adminAddresses[i]].length; j++) {\\r\\n                allAdminEvents[currentIndex] = adminEvents[adminAddresses[i]][j];\\r\\n                currentIndex++;\\r\\n            }\\r\\n        }\\r\\n        return allAdminEvents;\\r\\n    }\\r\\n\\r\\nfunction addInvitation(address userAddress, uint eventID) internal {\\r\\n    Invitation storage invitation = userInvitations[userAddress];\\r\\n    invitation.userAddress = userAddress;\\r\\n    invitation.eventIDs.push(eventID);\\r\\n}\\r\\n\\r\\nfunction getInvitations(address userAddress) public view returns (uint[] memory) {\\r\\n    Invitation storage invitation = userInvitations[userAddress];\\r\\n    return invitation.eventIDs;\\r\\n}\\r\\n  \\r\\n// Helper function to check if an address exists in an array\\r\\nfunction includes(address[] memory array, address element) internal pure returns (bool) {\\r\\n    for (uint i = 0; i < array.length; i++) {\\r\\n        if (array[i] == element) {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n    return false;\\r\\n}\\r\\n\\r\\n\\r\\n    function acceptInvitation(uint eventID) public {\\r\\n    // Check if the user is a member or admin\\r\\n    require(hasRole(MEMBER_ROLE, msg.sender) || hasRole(ADMIN_ROLE, msg.sender), \\\"Only members or admins can accept invitations\\\");\\r\\n    uint[] memory invitedEvents = getInvitations(msg.sender);\\r\\n    bool isInvited = false;\\r\\n    for (uint i = 0; i < invitedEvents.length; i++) {\\r\\n        if (invitedEvents[i] == eventID) {\\r\\n            isInvited = true;\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    require(isInvited, \\\"You are not invited to this event\\\");\\r\\n    CalendarEvent storage calendarEvent = eventsById[eventID];\\r\\n    calendarEvent.confirmedAttendees.push(msg.sender);\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function updateEvent(uint eventID, string memory title, uint startTime, uint endTime, string memory metadataURI) public {\\r\\n        require(hasRole(GUEST_ROLE, msg.sender) || hasRole(MEMBER_ROLE, msg.sender) || hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not a user, member or admin\\\");\\r\\n        if (hasRole(GUEST_ROLE, msg.sender)) {\\r\\n            require(eventID < userEvents[msg.sender].length, \\\"Invalid event ID\\\");\\r\\n            CalendarEvent storage eventToUpdate = userEvents[msg.sender][eventID];\\r\\n            eventToUpdate.title = title;\\r\\n            eventToUpdate.startTime = startTime;\\r\\n            eventToUpdate.endTime = endTime;\\r\\n            eventToUpdate.metadataURI = metadataURI;\\r\\n        } else if (hasRole(MEMBER_ROLE, msg.sender) || hasRole(ADMIN_ROLE, msg.sender)) {\\r\\n            require(eventID < memberEvents[msg.sender].length, \\\"Invalid event ID\\\");\\r\\n            CalendarEvent storage eventToUpdate = memberEvents[msg.sender][eventID];\\r\\n            eventToUpdate.title = title;\\r\\n            eventToUpdate.startTime = startTime;\\r\\n            eventToUpdate.endTime = endTime;\\r\\n            eventToUpdate.metadataURI = metadataURI;\\r\\n        }\\r\\n        \\r\\n    }\\r\\n\\r\\n    function getAllAddresses() public view returns (address[] memory, address[] memory, address[] memory) {\\r\\n        uint adminCount = 0;\\r\\n        uint memberCount = 0;\\r\\n        uint guestCount = 0;\\r\\n            for (uint i = 0; i < users.length; i++) {\\r\\n                if (hasRole(ADMIN_ROLE, users[i])) adminCount++;\\r\\n                if (hasRole(MEMBER_ROLE, users[i])) memberCount++;\\r\\n                if (hasRole(GUEST_ROLE, users[i])) guestCount++;\\r\\n           }\\r\\n        address[] memory adminAddresses = new address[](adminCount);\\r\\n        address[] memory memberAddresses = new address[](memberCount);\\r\\n        address[] memory guestAddresses = new address[](guestCount);\\r\\n        uint adminIndex = 0;\\r\\n        uint memberIndex = 0;\\r\\n        uint guestIndex = 0;\\r\\n            for (uint i = 0; i < users.length; i++) {\\r\\n                    if (hasRole(ADMIN_ROLE, users[i])) {\\r\\n                        adminAddresses[adminIndex] = users[i];\\r\\n                        adminIndex++;\\r\\n                    }\\r\\n                    if (hasRole(MEMBER_ROLE, users[i])) {\\r\\n                        memberAddresses[memberIndex] = users[i];\\r\\n                        memberIndex++;\\r\\n                    }\\r\\n                    if (hasRole(GUEST_ROLE, users[i])) {\\r\\n                        guestAddresses[guestIndex] = users[i];\\r\\n                        guestIndex++;\\r\\n                    }\\r\\n                }\\r\\n       return (adminAddresses, memberAddresses, guestAddresses);\\r\\n    }\\r\\n\\r\\n    function getAllMemberAddresses() public view returns (address[] memory) {\\r\\n        address[] memory memberAddresses = new address[](memberCount);\\r\\n        uint currentIndex = 0;\\r\\n        for (uint i = 0; i < users.length; i++) {\\r\\n            if (hasRole(MEMBER_ROLE, users[i])) {\\r\\n                memberAddresses[currentIndex] = users[i];\\r\\n                currentIndex++;\\r\\n            }\\r\\n        }\\r\\n        return memberAddresses;\\r\\n    }\\r\\n\\r\\n    function getAllGuestAddresses() public view returns (address[] memory) {\\r\\n         uint guestCount = 0;\\r\\n        for (uint i = 0; i < users.length; i++) {\\r\\n            if (hasRole(GUEST_ROLE, users[i])) {\\r\\n                guestCount++;\\r\\n                }\\r\\n            }\\r\\n        address[] memory guestAddresses = new address[](guestCount);\\r\\n        uint currentIndex = 0;\\r\\n            for (uint i = 0; i < users.length; i++) {\\r\\n            if (hasRole(GUEST_ROLE, users[i])) {\\r\\n                guestAddresses[currentIndex] = users[i];\\r\\n                currentIndex++;\\r\\n                }\\r\\n            }\\r\\n            return guestAddresses;\\r\\n    }\\r\\n\\r\\n  function createEvent(string memory title, uint startTime, uint endTime, string memory metadataURI, address[] memory invitees) public {\\r\\n    if (!hasRole(MEMBER_ROLE, msg.sender) && !hasRole(ADMIN_ROLE, msg.sender) && !hasRole(GUEST_ROLE, msg.sender)) {\\r\\n        addGuest(msg.sender);\\r\\n        guestCount++;\\r\\n    }\\r\\n    \\r\\n    CalendarEvent memory newEvent;\\r\\n    newEvent.eventId = totalEvents + 1;\\r\\n    newEvent.title = title;\\r\\n    newEvent.startTime = startTime;\\r\\n    newEvent.endTime = endTime;\\r\\n    newEvent.organizer = msg.sender;\\r\\n    newEvent.created = block.timestamp;\\r\\n    newEvent.metadataURI = metadataURI;\\r\\n    newEvent.invitedAttendees = invitees;\\r\\n    newEvent.confirmedAttendees = new address[](0);\\r\\n\\r\\n    if (hasRole(MEMBER_ROLE, msg.sender) || hasRole(ADMIN_ROLE, msg.sender)) {\\r\\n        memberEvents[msg.sender].push(newEvent);\\r\\n        members[msg.sender].eventIds.push(newEvent.eventId);\\r\\n    } else {\\r\\n        userEvents[msg.sender].push(newEvent);\\r\\n        guestEvents[msg.sender].push(newEvent);\\r\\n        guests[msg.sender].eventIds.push(newEvent.eventId);\\r\\n    }\\r\\n\\r\\n    uint eventID = newEvent.eventId;\\r\\n    totalEvents++;\\r\\n\\r\\n    // Add the event creator's address to eventCreators\\r\\n    eventCreators.push(msg.sender);\\r\\n\\r\\n    for (uint i = 0; i < invitees.length; i++) {\\r\\n        address invitee = invitees[i];\\r\\n        eventInvitations[eventID].push(invitee);\\r\\n        addInvitation(invitee, eventID);\\r\\n        emit UserInvited(eventID, title, invitee);\\r\\n    }\\r\\n\\r\\n    bytes32 userRole = MEMBER_ROLE;\\r\\n    if (hasRole(ADMIN_ROLE, msg.sender)) {\\r\\n        userRole = ADMIN_ROLE;\\r\\n    } else if (hasRole(GUEST_ROLE, msg.sender)) {\\r\\n        userRole = GUEST_ROLE;\\r\\n    }\\r\\n\\r\\n    emit NewEventCreated(eventID, title, msg.sender, startTime, endTime, metadataURI, block.timestamp, userRole);\\r\\n}\\r\\n\\r\\n       \\r\\n\\r\\n    function deleteEvent(uint eventID) public {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not a admin\\\");\\r\\n        if (hasRole(ADMIN_ROLE, msg.sender)) {\\r\\n            require(eventID < memberEvents[msg.sender].length, \\\"Invalid event ID\\\");\\r\\n            CalendarEvent[] storage events = memberEvents[msg.sender];\\r\\n                        delete events[eventID];\\r\\n        } \\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcde8790f4f2deb2ffbc300c21f7262f4ff24067d89beb7ebdcf4606b40b51fff\",\"license\":\"MIT\"},\"contracts/CalendarFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"./CalendarDailyTelos.sol\\\";\\r\\n\\r\\ncontract CalendarFactory {\\r\\n    address[] public calAddressArray;\\r\\n    address public owner;\\r\\n    mapping(address => Calendar) public calendar;\\r\\n\\r\\n\\r\\n    struct Calendar {\\r\\n        address calendarAdmin;\\r\\n        address calendarAddress;\\r\\n        string calendarName;\\r\\n        \\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, 'Only the contract owner may call this function');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n         function createTelosCalendar(string memory _calendarName, address _calendarAdmin) public {\\r\\n        CalendarDailyTelos tc = new CalendarDailyTelos(_calendarName, _calendarAdmin);\\r\\n        calAddressArray.push(address(tc));\\r\\n        calendar[address(tc)] = Calendar(_calendarAdmin, address(tc), _calendarName);\\r\\n        \\r\\n    }\\r\\n\\r\\n    function getCalendarAddresses() public view returns(address[] memory) {\\r\\n        return calAddressArray;\\r\\n    }\\r\\n\\r\\n    function getCalendar(address calendarAddress) public view returns (address, address, string memory) {\\r\\n        Calendar memory calendarAdmin = calendar[calendarAddress];\\r\\n        return (calendarAdmin.calendarAdmin, calendarAdmin.calendarAddress, calendarAdmin.calendarName);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe46caa1d5c1fa13384f40315337bb7ee7fe12d951744def7db0d06319b6e8728\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600180546001600160a01b03191633179055615f07806100326000396000f3fe60806040523480156200001157600080fd5b50600436106200006a5760003560e01c80631eaf7b25146200006f57806320e4563714620000a05780633717366c14620000b957806337586c6414620000e95780638da5cb5b1462000102578063aa949da31462000116575b600080fd5b62000086620000803660046200049a565b6200012d565b604051620000979392919062000507565b60405180910390f35b620000b7620000b136600462000554565b620001ef565b005b620000d0620000ca36600462000622565b620002e3565b6040516001600160a01b03909116815260200162000097565b620000f36200030e565b6040516200009791906200063c565b600154620000d0906001600160a01b031681565b62000086620001273660046200049a565b62000372565b60026020819052600091825260409091208054600182015492820180546001600160a01b0392831694909216929162000166906200068b565b80601f016020809104026020016040519081016040528092919081815260200182805462000194906200068b565b8015620001e55780601f10620001b957610100808354040283529160200191620001e5565b820191906000526020600020905b815481529060010190602001808311620001c757829003601f168201915b5050505050905083565b6000828260405162000201906200046f565b6200020e929190620006c7565b604051809103906000f0801580156200022b573d6000803e3d6000fd5b5060008054600180820183557f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56390910180546001600160a01b03199081166001600160a01b0386811691821790935560408051606081018252898516815260208082018481528284018d81529489526002918290529290972081518154861690871617815591519582018054909416959094169490941790915551939450929091820190620002db908262000742565b505050505050565b60008181548110620002f457600080fd5b6000918252602090912001546001600160a01b0316905081565b606060008054806020026020016040519081016040528092919081815260200182805480156200036857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000349575b5050505050905090565b6001600160a01b0380821660009081526002602081815260408084208151606081810184528254881682526001830154909716938101939093529283018054949586959094869493909290840191620003cb906200068b565b80601f0160208091040260200160405190810160405280929190818152602001828054620003f9906200068b565b80156200044a5780601f106200041e576101008083540402835291602001916200044a565b820191906000526020600020905b8154815290600101906020018083116200042c57829003601f168201915b5050509190925250508151602083015160409093015190989297509550909350505050565b6156c2806200081083390190565b80356001600160a01b03811681146200049557600080fd5b919050565b600060208284031215620004ad57600080fd5b620004b8826200047d565b9392505050565b6000815180845260005b81811015620004e757602081850181015186830182015201620004c9565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b038481168252831660208201526060604082018190526000906200053590830184620004bf565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200056857600080fd5b823567ffffffffffffffff808211156200058157600080fd5b818501915085601f8301126200059657600080fd5b813581811115620005ab57620005ab6200053e565b604051601f8201601f19908116603f01168101908382118183101715620005d657620005d66200053e565b81604052828152886020848701011115620005f057600080fd5b82602086016020830137600060208483010152809650505050505062000619602084016200047d565b90509250929050565b6000602082840312156200063557600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156200067f5783516001600160a01b03168352928401929184019160010162000658565b50909695505050505050565b600181811c90821680620006a057607f821691505b602082108103620006c157634e487b7160e01b600052602260045260246000fd5b50919050565b604081526000620006dc6040830185620004bf565b905060018060a01b03831660208301529392505050565b601f8211156200073d57600081815260208120601f850160051c810160208610156200071c5750805b601f850160051c820191505b81811015620002db5782815560010162000728565b505050565b815167ffffffffffffffff8111156200075f576200075f6200053e565b62000777816200077084546200068b565b84620006f3565b602080601f831160018114620007af5760008415620007965750858301515b600019600386901b1c1916600185901b178555620002db565b600085815260208120601f198616915b82811015620007e057888601518255948401946001909101908401620007bf565b5085821015620007ff5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fe60806040523480156200001157600080fd5b50604051620056c2380380620056c28339810160408190526200003491620001c5565b60016200004283826200033c565b50600280546001600160a01b0383166001600160a01b0319918216811790925560038054909116909117905562000089600080516020620056a283398151915282620000e2565b620000b57f829b824e2329e205435d941c9f13baf578548505283d29261236d8e6596d463682620000e2565b620000d0600080516020620056a283398151915230620000e2565b50506001600855600060095562000408565b620000ee8282620000f2565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620000ee576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556200014e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620001c057600080fd5b919050565b60008060408385031215620001d957600080fd5b82516001600160401b0380821115620001f157600080fd5b818501915085601f8301126200020657600080fd5b8151818111156200021b576200021b62000192565b604051601f8201601f19908116603f0116810190838211818310171562000246576200024662000192565b816040528281526020935088848487010111156200026357600080fd5b600091505b8282101562000287578482018401518183018501529083019062000268565b6000848483010152809650505050620002a2818601620001a8565b925050509250929050565b600181811c90821680620002c257607f821691505b602082108103620002e357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200033757600081815260208120601f850160051c81016020861015620003125750805b601f850160051c820191505b8181101562000333578281556001016200031e565b5050505b505050565b81516001600160401b0381111562000358576200035862000192565b6200037081620003698454620002ad565b84620002e9565b602080601f831160018114620003a857600084156200038f5750858301515b600019600386901b1c1916600185901b17855562000333565b600085815260208120601f198616915b82811015620003d957888601518255948401946001909101908401620003b8565b5085821015620003f85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61528a80620004186000396000f3fe608060405234801561001057600080fd5b50600436106102b65760003560e01c806377ef09a011610172578063ba870686116100d9578063d5dd1b5011610092578063d5dd1b5014610664578063d98b88fa14610677578063ef44b47814610697578063ef7e1f68146106aa578063f71f67f4146106bd578063f8749a58146106c5578063fc3d2e46146106d857600080fd5b8063ba87068614610612578063bdfc98931461061b578063c1ce869b1461062e578063c27a500d14610636578063ca6d56dc1461063e578063d547741f1461065157600080fd5b806395fa6c501161012b57806395fa6c50146105a75780639c54df64146105ba578063a0cb1333146105cd578063a10f469e146105d5578063a217fddf146105ea578063b98079bc146105f257600080fd5b806377ef09a01461053957806378b2250f1461054c5780637dfbfb43146105555780638c5f24081461056857806391d148541461057d5780639516a1041461059057600080fd5b806336568abe116102215780635c7e8863116101da5780635c7e8863146104bb5780635e0e2804146104d057806369ca75fc146104e35780636d7524ee146104eb5780636dc4c2af146104fe5780636f4d469b1461051157806375b238fc1461052457600080fd5b806336568abe14610426578063365b98b214610439578063429b62e51461044c578063455f20dc14610475578063464c5b6c146104955780635136f358146104a857600080fd5b806311aee3801161027357806311aee380146103a8578063248a9ca3146103bf578063286482f9146103e25780632b7832b3146103f55780632f2ff15d146103fe5780632fd1949d1461041157600080fd5b806301ffc9a7146102bb57806308ae4b0c146102e35780630b1ca49a146103245780630eda85ee146103395780630f5c4a2b14610362578063110cd10014610388575b600080fd5b6102ce6102c93660046148ac565b610701565b60405190151581526020015b60405180910390f35b61030c6102f13660046148ed565b600c602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016102da565b6103376103323660046148ed565b610738565b005b61030c6103473660046148ed565b600b602052600090815260409020546001600160a01b031681565b610375610370366004614908565b6107db565b6040516102da9796959493929190614982565b61039b6103963660046148ed565b610959565b6040516102da9190614ad5565b6103b160085481565b6040519081526020016102da565b6103b16103cd366004614b37565b60009081526020819052604090206001015490565b61039b6103f03660046148ed565b610c28565b6103b160075481565b61033761040c366004614b50565b610f14565b610419611044565b6040516102da9190614b7c565b610337610434366004614b50565b611163565b61030c610447366004614b37565b6111dd565b61030c61045a3660046148ed565b600d602052600090815260409020546001600160a01b031681565b6103b16104833660046148ed565b60136020526000908152604090205481565b6103376104a3366004614b37565b611207565b6103376104b63660046148ed565b611381565b6103b16000805160206151d583398151915281565b6103756104de366004614908565b6114ba565b6104196114d6565b6103756104f9366004614b37565b611633565b61033761050c366004614c44565b611655565b61033761051f366004614d4a565b611886565b6103b160008051602061521583398151915281565b60025461030c906001600160a01b031681565b6103b160095481565b610337610563366004614d86565b611ade565b6105706120e1565b6040516102da9190614e14565b6102ce61058b366004614b50565b61216f565b610598612198565b6040516102da93929190614e27565b61030c6105b5366004614b37565b61252b565b6103376105c8366004614d4a565b61253b565b61039b612793565b6103b160008051602061523583398151915281565b6103b1600081565b610605610600366004614b37565b612c77565b6040516102da9190614e60565b6103b160065481565b610375610629366004614908565b613077565b61039b613093565b61039b61356c565b61033761064c3660046148ed565b613741565b61033761065f366004614b50565b61391a565b610375610672366004614908565b613a27565b61068a6106853660046148ed565b613a43565b6040516102da9190614e73565b61039b6106a53660046148ed565b613ab5565b61030c6106b8366004614eab565b613da0565b61039b613dd8565b6103376106d3366004614b37565b6142b1565b61030c6106e63660046148ed565b600a602052600090815260409020546001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b148061073257506301ffc9a760e01b6001600160e01b03198316145b92915050565b6107506000805160206152158339815191523361216f565b6107755760405162461bcd60e51b815260040161076c90614ecd565b60405180910390fd5b61078d6000805160206152358339815191528261391a565b6001600160a01b0381166000908152600c6020526040812080546001600160a01b0319168155906107c1600183018261474e565b5050600880549060006107d383614f13565b919050555050565b601260205281600052604060002081815481106107f757600080fd5b90600052602060002090600902016000915091505080600001549080600101805461082190614f2a565b80601f016020809104026020016040519081016040528092919081815260200182805461084d90614f2a565b801561089a5780601f1061086f5761010080835404028352916020019161089a565b820191906000526020600020905b81548152906001019060200180831161087d57829003601f168201915b505050600284015460038501546004860154600587015460068801805497986001600160a01b039095169793965091945092916108d690614f2a565b80601f016020809104026020016040519081016040528092919081815260200182805461090290614f2a565b801561094f5780601f106109245761010080835404028352916020019161094f565b820191906000526020600020905b81548152906001019060200180831161093257829003601f168201915b5050505050905087565b60606109736000805160206152158339815191523361216f565b61098f5760405162461bcd60e51b815260040161076c90614ecd565b6001600160a01b038216600090815260116020908152604080832080548251818502810185019093528083529193909284015b82821015610c1c57838290600052602060002090600902016040518061012001604052908160008201548152602001600182018054610a0090614f2a565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2c90614f2a565b8015610a795780601f10610a4e57610100808354040283529160200191610a79565b820191906000526020600020905b815481529060010190602001808311610a5c57829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260068201805460a090920191610ac790614f2a565b80601f0160208091040260200160405190810160405280929190818152602001828054610af390614f2a565b8015610b405780601f10610b1557610100808354040283529160200191610b40565b820191906000526020600020905b815481529060010190602001808311610b2357829003601f168201915b5050505050815260200160078201805480602002602001604051908101604052809291908181526020018280548015610ba257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b84575b5050505050815260200160088201805480602002602001604051908101604052809291908181526020018280548015610c0457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610be6575b505050505081525050815260200190600101906109c2565b5050505090505b919050565b6060610c426000805160206152358339815191523361216f565b610c875760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba10309036b2b6b132b960511b604482015260640161076c565b6001600160a01b038216600090815260126020908152604080832080548251818502810185019093528083529193909284015b82821015610c1c57838290600052602060002090600902016040518061012001604052908160008201548152602001600182018054610cf890614f2a565b80601f0160208091040260200160405190810160405280929190818152602001828054610d2490614f2a565b8015610d715780601f10610d4657610100808354040283529160200191610d71565b820191906000526020600020905b815481529060010190602001808311610d5457829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260068201805460a090920191610dbf90614f2a565b80601f0160208091040260200160405190810160405280929190818152602001828054610deb90614f2a565b8015610e385780601f10610e0d57610100808354040283529160200191610e38565b820191906000526020600020905b815481529060010190602001808311610e1b57829003601f168201915b5050505050815260200160078201805480602002602001604051908101604052809291908181526020018280548015610e9a57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610e7c575b5050505050815260200160088201805480602002602001604051908101604052809291908181526020018280548015610efc57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ede575b50505050508152505081526020019060010190610cba565b610f2c6000805160206152158339815191523361216f565b610f485760405162461bcd60e51b815260040161076c90614ecd565b610f606000805160206152158339815191523361216f565b610f7c5760405162461bcd60e51b815260040161076c90614ecd565b610f8682826143f5565b600080516020615235833981519152820361101b576040805180820182526001600160a01b038381168083528351600080825260208083018752808601928352928152600c835294909420835181546001600160a01b03191693169290921782559251805192939192610fff926001850192019061476c565b5050600880549150600061101283614f64565b91905055505050565b6000805160206151d58339815191528203611040576009805490600061101283614f64565b5050565b606060006008546001600160401b0381111561106257611062614b8f565b60405190808252806020026020018201604052801561108b578160200160208202803683370190505b5090506000805b60045481101561115b576110db600080516020615235833981519152600483815481106110c1576110c1614f7d565b6000918252602090912001546001600160a01b031661216f565b1561114957600481815481106110f3576110f3614f7d565b9060005260206000200160009054906101000a90046001600160a01b031683838151811061112357611123614f7d565b6001600160a01b03909216602092830291909101909101528161114581614f64565b9250505b8061115381614f64565b915050611092565b509092915050565b6001600160a01b03811633146111d35760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161076c565b611040828261441f565b600481815481106111ed57600080fd5b6000918252602090912001546001600160a01b0316905081565b61121f6000805160206152358339815191523361216f565b8061123d575061123d6000805160206152158339815191523361216f565b61129f5760405162461bcd60e51b815260206004820152602d60248201527f4f6e6c79206d656d62657273206f722061646d696e732063616e20616363657060448201526c7420696e7669746174696f6e7360981b606482015260840161076c565b60006112aa33613a43565b90506000805b82518110156112f457838382815181106112cc576112cc614f7d565b6020026020010151036112e257600191506112f4565b806112ec81614f64565b9150506112b0565b508061134c5760405162461bcd60e51b815260206004820152602160248201527f596f7520617265206e6f7420696e766974656420746f2074686973206576656e6044820152601d60fa1b606482015260840161076c565b50506000908152600e602090815260408220600801805460018101825590835291200180546001600160a01b03191633179055565b6113996000805160206151d583398151915282614484565b6040805180820182526001600160a01b038381168083528351600080825260208083018752808601928352928152600b835294909420835181546001600160a01b031916931692909217825592518051929391926113fd926001850192019061476c565b5050600980549150600061141083614f64565b91905055506000805b60045481101561147557826001600160a01b03166004828154811061144057611440614f7d565b6000918252602090912001546001600160a01b0316036114635760019150611475565b8061146d81614f64565b915050611419565b508061104057600480546001810182556000919091526000805160206151f58339815191520180546001600160a01b0384166001600160a01b03199091161790555050565b601060205281600052604060002081815481106107f757600080fd5b60606000805b6004548110156115305761150b6000805160206151d5833981519152600483815481106110c1576110c1614f7d565b1561151e578161151a81614f64565b9250505b8061152881614f64565b9150506114dc565b506000816001600160401b0381111561154b5761154b614b8f565b604051908082528060200260200182016040528015611574578160200160208202803683370190505b5090506000805b60045481101561162a576115aa6000805160206151d5833981519152600483815481106110c1576110c1614f7d565b1561161857600481815481106115c2576115c2614f7d565b9060005260206000200160009054906101000a90046001600160a01b03168383815181106115f2576115f2614f7d565b6001600160a01b03909216602092830291909101909101528161161481614f64565b9250505b8061162281614f64565b91505061157b565b50909392505050565b600e602052600090815260409020805460018201805491929161082190614f2a565b61166d6000805160206151d58339815191523361216f565b8061168b575061168b6000805160206152358339815191523361216f565b806116a957506116a96000805160206152158339815191523361216f565b6117035760405162461bcd60e51b815260206004820152602560248201527f43616c6c6572206973206e6f74206120757365722c206d656d626572206f722060448201526430b236b4b760d91b606482015260840161076c565b61171b6000805160206151d58339815191523361216f565b156117b457336000908152600f6020526040902054851061174e5760405162461bcd60e51b815260040161076c90614f93565b336000908152600f6020526040812080548790811061176f5761176f614f7d565b9060005260206000209060090201905084816001019081611790919061500b565b506003810184905560048101839055600681016117ad838261500b565b505061187f565b6117cc6000805160206152358339815191523361216f565b806117ea57506117ea6000805160206152158339815191523361216f565b1561187f5733600090815260126020526040902054851061181d5760405162461bcd60e51b815260040161076c90614f93565b33600090815260126020526040812080548790811061183e5761183e614f7d565b906000526020600020906009020190508481600101908161185f919061500b565b5060038101849055600481018390556006810161187c838261500b565b50505b5050505050565b61189e6000805160206152158339815191523361216f565b6118ba5760405162461bcd60e51b815260040161076c90614ecd565b60005b81518110156110405760008282815181106118da576118da614f7d565b602002602001015190506118fc60008051602061523583398151915282614484565b6040805180820182526001600160a01b038381168083528351600080825260208083018752808601928352928152600c835294909420835181546001600160a01b03191693169290921782559251805192939192611960926001850192019061476c565b5050600880549150600061197383614f64565b91905055506119906000805160206151d58339815191528261216f565b611a29576119ac6000805160206151d583398151915282614484565b6040805180820182526001600160a01b038381168083528351600080825260208083018752808601928352928152600b835294909420835181546001600160a01b03191693169290921782559251805192939192611a10926001850192019061476c565b50506009805491506000611a2383614f64565b91905055505b6000805b600454811015611a8957826001600160a01b031660048281548110611a5457611a54614f7d565b6000918252602090912001546001600160a01b031603611a775760019150611a89565b80611a8181614f64565b915050611a2d565b5080611ac957600480546001810182556000919091526000805160206151f58339815191520180546001600160a01b0319166001600160a01b0384161790555b50508080611ad690614f64565b9150506118bd565b611af66000805160206152358339815191523361216f565b158015611b185750611b166000805160206152158339815191523361216f565b155b8015611b395750611b376000805160206151d58339815191523361216f565b155b15611b5d57611b4733611381565b60098054906000611b5783614f64565b91905055505b611b656147b7565b600654611b739060016150ca565b81526020810186905260608101859052608081018490523360408201524260a082015260c0810183905260e081018290526000604051908082528060200260200182016040528015611bcf578160200160208202803683370190505b50610100820152611bee6000805160206152358339815191523361216f565b80611c0c5750611c0c6000805160206152158339815191523361216f565b15611d1457336000908152601260209081526040822080546001818101835591845292829020845160099094020192835590830151839291820190611c51908261500b565b5060408201516002820180546001600160a01b0319166001600160a01b03909216919091179055606082015160038201556080820151600482015560a0820151600582015560c08201516006820190611caa908261500b565b5060e08201518051611cc691600784019160209091019061480c565b506101008201518051611ce391600884019160209091019061480c565b5050336000908152600c60209081526040822084516001918201805492830181558452919092209091015550611ee8565b336000908152600f60209081526040822080546001818101835591845292829020845160099094020192835590830151839291820190611d54908261500b565b5060408201516002820180546001600160a01b0319166001600160a01b03909216919091179055606082015160038201556080820151600482015560a0820151600582015560c08201516006820190611dad908261500b565b5060e08201518051611dc991600784019160209091019061480c565b506101008201518051611de691600884019160209091019061480c565b505033600090815260106020908152604082208054600181810183559184529282902085516009909402019283559084015184935090820190611e29908261500b565b5060408201516002820180546001600160a01b0319166001600160a01b03909216919091179055606082015160038201556080820151600482015560a0820151600582015560c08201516006820190611e82908261500b565b5060e08201518051611e9e91600784019160209091019061480c565b506101008201518051611ebb91600884019160209091019061480c565b5050336000908152600b602090815260408220845160019182018054928301815584529190922090910155505b805160068054906000611efa83614f64565b90915550506005805460018101825560009182527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b031916331790555b835181101561201b576000848281518110611f5e57611f5e614f7d565b60209081029190910181015160008581526014835260408082208054600180820183559184528584200180546001600160a01b0386166001600160a01b03199182168117909255818552600a875292842080549093161782559081018054918201815582529290209091018490559050827fd48873c66feece7bbf3cbcd8d14102600b7da47eac54823e0441effd7da44c5e8a836040516120009291906150dd565b60405180910390a2508061201381614f64565b915050611f41565b506000805160206152358339815191526120436000805160206152158339815191523361216f565b1561205d575060008051602061521583398151915261208b565b6120756000805160206151d58339815191523361216f565b1561208b57506000805160206151d58339815191525b336001600160a01b0316827fb0cd684d8e2468fcd73b7ad59b2b57f99cc49f0a2f66ea314ecc7da59c83b8378a8a8a8a42886040516120cf96959493929190615107565b60405180910390a35050505050505050565b600180546120ee90614f2a565b80601f016020809104026020016040519081016040528092919081815260200182805461211a90614f2a565b80156121675780601f1061213c57610100808354040283529160200191612167565b820191906000526020600020905b81548152906001019060200180831161214a57829003601f168201915b505050505081565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60608060606000806000805b600454811015612268576121d3600080516020615215833981519152600483815481106110c1576110c1614f7d565b156121e657836121e281614f64565b9450505b61220b600080516020615235833981519152600483815481106110c1576110c1614f7d565b1561221e578261221a81614f64565b9350505b6122436000805160206151d5833981519152600483815481106110c1576110c1614f7d565b15612256578161225281614f64565b9250505b8061226081614f64565b9150506121a4565b506000836001600160401b0381111561228357612283614b8f565b6040519080825280602002602001820160405280156122ac578160200160208202803683370190505b5090506000836001600160401b038111156122c9576122c9614b8f565b6040519080825280602002602001820160405280156122f2578160200160208202803683370190505b5090506000836001600160401b0381111561230f5761230f614b8f565b604051908082528060200260200182016040528015612338578160200160208202803683370190505b5090506000806000805b60045481101561251757612371600080516020615215833981519152600483815481106110c1576110c1614f7d565b156123df576004818154811061238957612389614f7d565b9060005260206000200160009054906101000a90046001600160a01b03168785815181106123b9576123b9614f7d565b6001600160a01b0390921660209283029190910190910152836123db81614f64565b9450505b612404600080516020615235833981519152600483815481106110c1576110c1614f7d565b15612472576004818154811061241c5761241c614f7d565b9060005260206000200160009054906101000a90046001600160a01b031686848151811061244c5761244c614f7d565b6001600160a01b03909216602092830291909101909101528261246e81614f64565b9350505b6124976000805160206151d5833981519152600483815481106110c1576110c1614f7d565b1561250557600481815481106124af576124af614f7d565b9060005260206000200160009054906101000a90046001600160a01b03168583815181106124df576124df614f7d565b6001600160a01b03909216602092830291909101909101528161250181614f64565b9250505b8061250f81614f64565b915050612342565b50949b939a50919850919650505050505050565b600581815481106111ed57600080fd5b6125536000805160206152158339815191523361216f565b61256f5760405162461bcd60e51b815260040161076c90614ecd565b60005b815181101561104057600082828151811061258f5761258f614f7d565b602002602001015190506125b160008051602061521583398151915282614484565b6040805180820182526001600160a01b038381168083528351600080825260208083018752808601928352928152600d835294909420835181546001600160a01b03191693169290921782559251805192939192612615926001850192019061476c565b5050600780549150600061262883614f64565b91905055506126456000805160206152358339815191528261216f565b6126de5761266160008051602061523583398151915282614484565b6040805180820182526001600160a01b038381168083528351600080825260208083018752808601928352928152600c835294909420835181546001600160a01b031916931692909217825592518051929391926126c5926001850192019061476c565b505060088054915060006126d883614f64565b91905055505b6000805b60045481101561273e57826001600160a01b03166004828154811061270957612709614f7d565b6000918252602090912001546001600160a01b03160361272c576001915061273e565b8061273681614f64565b9150506126e2565b508061277e57600480546001810182556000919091526000805160206151f58339815191520180546001600160a01b0319166001600160a01b0384161790555b5050808061278b90614f64565b915050612572565b60606000806004805490506001600160401b038111156127b5576127b5614b8f565b6040519080825280602002602001820160405280156127de578160200160208202803683370190505b5090506000805b6004548110156128dc576128146000805160206151d5833981519152600483815481106110c1576110c1614f7d565b156128ca576004818154811061282c5761282c614f7d565b9060005260206000200160009054906101000a90046001600160a01b031683838151811061285c5761285c614f7d565b6001600160a01b03909216602092830291909101909101528161287e81614f64565b925050601060006004838154811061289857612898614f7d565b60009182526020808320909101546001600160a01b031683528201929092526040019020546128c790856150ca565b93505b806128d481614f64565b9150506127e5565b506000836001600160401b038111156128f7576128f7614b8f565b60405190808252806020026020018201604052801561293057816020015b61291d6147b7565b8152602001906001900390816129155790505b5090506000805b83811015612c6c5760005b6010600087848151811061295857612958614f7d565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002080549050811015612c5957601060008784815181106129a1576129a1614f7d565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081815481106129da576129da614f7d565b90600052602060002090600902016040518061012001604052908160008201548152602001600182018054612a0e90614f2a565b80601f0160208091040260200160405190810160405280929190818152602001828054612a3a90614f2a565b8015612a875780601f10612a5c57610100808354040283529160200191612a87565b820191906000526020600020905b815481529060010190602001808311612a6a57829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260068201805460a090920191612ad590614f2a565b80601f0160208091040260200160405190810160405280929190818152602001828054612b0190614f2a565b8015612b4e5780601f10612b2357610100808354040283529160200191612b4e565b820191906000526020600020905b815481529060010190602001808311612b3157829003601f168201915b5050505050815260200160078201805480602002602001604051908101604052809291908181526020018280548015612bb057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612b92575b5050505050815260200160088201805480602002602001604051908101604052809291908181526020018280548015612c1257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612bf4575b505050505081525050848481518110612c2d57612c2d614f7d565b60200260200101819052508280612c4390614f64565b9350508080612c5190614f64565b915050612942565b5080612c6481614f64565b915050612937565b509095945050505050565b612c7f6147b7565b60005b60055481101561303c576000612cb3600080516020615235833981519152600584815481106110c1576110c1614f7d565b15612cfa576012600060058481548110612ccf57612ccf614f7d565b60009182526020808320909101546001600160a01b0316835282019290925260400190209050612d82565b612d1f6000805160206151d5833981519152600584815481106110c1576110c1614f7d565b15612d3b576010600060058481548110612ccf57612ccf614f7d565b612d60600080516020615215833981519152600584815481106110c1576110c1614f7d565b15612d7c576011600060058481548110612ccf57612ccf614f7d565b5061302a565b60005b81548110156130275784828281548110612da157612da1614f7d565b9060005260206000209060090201600001540361301557818181548110612dca57612dca614f7d565b90600052602060002090600902016040518061012001604052908160008201548152602001600182018054612dfe90614f2a565b80601f0160208091040260200160405190810160405280929190818152602001828054612e2a90614f2a565b8015612e775780601f10612e4c57610100808354040283529160200191612e77565b820191906000526020600020905b815481529060010190602001808311612e5a57829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260068201805460a090920191612ec590614f2a565b80601f0160208091040260200160405190810160405280929190818152602001828054612ef190614f2a565b8015612f3e5780601f10612f1357610100808354040283529160200191612f3e565b820191906000526020600020905b815481529060010190602001808311612f2157829003601f168201915b5050505050815260200160078201805480602002602001604051908101604052809291908181526020018280548015612fa057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612f82575b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561300257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612fe4575b5050505050815250509350505050919050565b8061301f81614f64565b915050612d85565b50505b8061303481614f64565b915050612c82565b5060405162461bcd60e51b815260206004820152600f60248201526e115d995b9d081b9bdd08199bdd5b99608a1b604482015260640161076c565b600f60205281600052604060002081815481106107f757600080fd5b60606000806004805490506001600160401b038111156130b5576130b5614b8f565b6040519080825280602002602001820160405280156130de578160200160208202803683370190505b5090506000805b6004548110156131dc57613114600080516020615235833981519152600483815481106110c1576110c1614f7d565b156131ca576004818154811061312c5761312c614f7d565b9060005260206000200160009054906101000a90046001600160a01b031683838151811061315c5761315c614f7d565b6001600160a01b03909216602092830291909101909101528161317e81614f64565b925050601260006004838154811061319857613198614f7d565b60009182526020808320909101546001600160a01b031683528201929092526040019020546131c790856150ca565b93505b806131d481614f64565b9150506130e5565b506000836001600160401b038111156131f7576131f7614b8f565b60405190808252806020026020018201604052801561323057816020015b61321d6147b7565b8152602001906001900390816132155790505b5090506000805b83811015612c6c5760005b6012600087848151811061325857613258614f7d565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208054905081101561355957601260008784815181106132a1576132a1614f7d565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081815481106132da576132da614f7d565b9060005260206000209060090201604051806101200160405290816000820154815260200160018201805461330e90614f2a565b80601f016020809104026020016040519081016040528092919081815260200182805461333a90614f2a565b80156133875780601f1061335c57610100808354040283529160200191613387565b820191906000526020600020905b81548152906001019060200180831161336a57829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260068201805460a0909201916133d590614f2a565b80601f016020809104026020016040519081016040528092919081815260200182805461340190614f2a565b801561344e5780601f106134235761010080835404028352916020019161344e565b820191906000526020600020905b81548152906001019060200180831161343157829003601f168201915b50505050508152602001600782018054806020026020016040519081016040528092919081815260200182805480156134b057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613492575b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561351257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116134f4575b50505050508152505084848151811061352d5761352d614f7d565b6020026020010181905250828061354390614f64565b935050808061355190614f64565b915050613242565b508061356481614f64565b915050613237565b60606000613578613093565b90506000613584612793565b90506000613590613dd8565b905060008151835185516135a491906150ca565b6135ae91906150ca565b90506000816001600160401b038111156135ca576135ca614b8f565b60405190808252806020026020018201604052801561360357816020015b6135f06147b7565b8152602001906001900390816135e85790505b5090506000805b865181101561366b5786818151811061362557613625614f7d565b602002602001015183838151811061363f5761363f614f7d565b6020026020010181905250818061365590614f64565b925050808061366390614f64565b91505061360a565b5060005b85518110156136d05785818151811061368a5761368a614f7d565b60200260200101518383815181106136a4576136a4614f7d565b602002602001018190525081806136ba90614f64565b92505080806136c890614f64565b91505061366f565b5060005b8451811015613735578481815181106136ef576136ef614f7d565b602002602001015183838151811061370957613709614f7d565b6020026020010181905250818061371f90614f64565b925050808061372d90614f64565b9150506136d4565b50909695505050505050565b6137596000805160206152158339815191523361216f565b6137755760405162461bcd60e51b815260040161076c90614ecd565b61378d60008051602061523583398151915282614484565b6040805180820182526001600160a01b038381168083528351600080825260208083018752808601928352928152600c835294909420835181546001600160a01b031916931692909217825592518051929391926137f1926001850192019061476c565b5050600880549150600061380483614f64565b91905055506138216000805160206151d58339815191528261216f565b6138ba5761383d6000805160206151d583398151915282614484565b6040805180820182526001600160a01b038381168083528351600080825260208083018752808601928352928152600b835294909420835181546001600160a01b031916931692909217825592518051929391926138a1926001850192019061476c565b505060098054915060006138b483614f64565b91905055505b6000805b60045481101561147557826001600160a01b0316600482815481106138e5576138e5614f7d565b6000918252602090912001546001600160a01b0316036139085760019150611475565b8061391281614f64565b9150506138be565b6139326000805160206152158339815191523361216f565b61394e5760405162461bcd60e51b815260040161076c90614ecd565b6139666000805160206152158339815191523361216f565b6139825760405162461bcd60e51b815260040161076c90614ecd565b61398c828261448e565b6139a46000805160206152158339815191528261216f565b1580156139c457506139c46000805160206152358339815191528261216f565b15611040576139e16000805160206152358339815191528261391a565b6001600160a01b0381166000908152600c6020526040812080546001600160a01b031916815590613a15600183018261474e565b50506008805490600061101283614f13565b601160205281600052604060002081815481106107f757600080fd5b6001600160a01b0381166000908152600a60209081526040918290206001810180548451818502810185019095528085526060949293830182828015613aa857602002820191906000526020600020905b815481526020019060010190808311613a94575b5050505050915050919050565b6060613acf6000805160206151d58339815191528361216f565b613b135760405162461bcd60e51b815260206004820152601560248201527410d85b1b195c881a5cc81b9bdd08184819dd595cdd605a1b604482015260640161076c565b6001600160a01b038216600090815260106020908152604080832080548251818502810185019093528083529193909284015b82821015610c1c57838290600052602060002090600902016040518061012001604052908160008201548152602001600182018054613b8490614f2a565b80601f0160208091040260200160405190810160405280929190818152602001828054613bb090614f2a565b8015613bfd5780601f10613bd257610100808354040283529160200191613bfd565b820191906000526020600020905b815481529060010190602001808311613be057829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260068201805460a090920191613c4b90614f2a565b80601f0160208091040260200160405190810160405280929190818152602001828054613c7790614f2a565b8015613cc45780601f10613c9957610100808354040283529160200191613cc4565b820191906000526020600020905b815481529060010190602001808311613ca757829003601f168201915b5050505050815260200160078201805480602002602001604051908101604052809291908181526020018280548015613d2657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613d08575b5050505050815260200160088201805480602002602001604051908101604052809291908181526020018280548015613d8857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613d6a575b50505050508152505081526020019060010190613b46565b60146020528160005260406000208181548110613dbc57600080fd5b6000918252602090912001546001600160a01b03169150829050565b60606000806004805490506001600160401b03811115613dfa57613dfa614b8f565b604051908082528060200260200182016040528015613e23578160200160208202803683370190505b5090506000805b600454811015613f2157613e59600080516020615215833981519152600483815481106110c1576110c1614f7d565b15613f0f5760048181548110613e7157613e71614f7d565b9060005260206000200160009054906101000a90046001600160a01b0316838381518110613ea157613ea1614f7d565b6001600160a01b039092166020928302919091019091015281613ec381614f64565b9250506011600060048381548110613edd57613edd614f7d565b60009182526020808320909101546001600160a01b03168352820192909252604001902054613f0c90856150ca565b93505b80613f1981614f64565b915050613e2a565b506000836001600160401b03811115613f3c57613f3c614b8f565b604051908082528060200260200182016040528015613f7557816020015b613f626147b7565b815260200190600190039081613f5a5790505b5090506000805b83811015612c6c5760005b60116000878481518110613f9d57613f9d614f7d565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208054905081101561429e5760116000878481518110613fe657613fe6614f7d565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020818154811061401f5761401f614f7d565b9060005260206000209060090201604051806101200160405290816000820154815260200160018201805461405390614f2a565b80601f016020809104026020016040519081016040528092919081815260200182805461407f90614f2a565b80156140cc5780601f106140a1576101008083540402835291602001916140cc565b820191906000526020600020905b8154815290600101906020018083116140af57829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260068201805460a09092019161411a90614f2a565b80601f016020809104026020016040519081016040528092919081815260200182805461414690614f2a565b80156141935780601f1061416857610100808354040283529160200191614193565b820191906000526020600020905b81548152906001019060200180831161417657829003601f168201915b50505050508152602001600782018054806020026020016040519081016040528092919081815260200182805480156141f557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116141d7575b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561425757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311614239575b50505050508152505084848151811061427257614272614f7d565b6020026020010181905250828061428890614f64565b935050808061429690614f64565b915050613f87565b50806142a981614f64565b915050613f7c565b6142c96000805160206152158339815191523361216f565b61430d5760405162461bcd60e51b815260206004820152601560248201527421b0b63632b91034b9903737ba10309030b236b4b760591b604482015260640161076c565b6143256000805160206152158339815191523361216f565b156143f2573360009081526012602052604090205481106143585760405162461bcd60e51b815260040161076c90614f93565b336000908152601260205260409020805481908390811061437b5761437b614f7d565b6000918252602082206009909102018181559061439b6001830182614861565b6002820180546001600160a01b031916905560006003830181905560048301819055600583018190556143d2906006840190614861565b6143e060078301600061474e565b6143ee60088301600061474e565b5050505b50565b600082815260208190526040902060010154614410816144b3565b61441a83836144bd565b505050565b614429828261216f565b15611040576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61104082826144bd565b6000828152602081905260409020600101546144a9816144b3565b61441a838361441f565b6143f28133614541565b6144c7828261216f565b611040576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556144fd3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61454b828261216f565b611040576145588161459a565b6145638360206145ac565b60405160200161457492919061514e565b60408051601f198184030181529082905262461bcd60e51b825261076c91600401614e14565b60606107326001600160a01b03831660145b606060006145bb8360026151bd565b6145c69060026150ca565b6001600160401b038111156145dd576145dd614b8f565b6040519080825280601f01601f191660200182016040528015614607576020820181803683370190505b509050600360fc1b8160008151811061462257614622614f7d565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061465157614651614f7d565b60200101906001600160f81b031916908160001a90535060006146758460026151bd565b6146809060016150ca565b90505b60018111156146f8576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106146b4576146b4614f7d565b1a60f81b8282815181106146ca576146ca614f7d565b60200101906001600160f81b031916908160001a90535060049490941c936146f181614f13565b9050614683565b5083156147475760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161076c565b9392505050565b50805460008255906000526020600020908101906143f29190614897565b8280548282559060005260206000209081019282156147a7579160200282015b828111156147a757825182559160200191906001019061478c565b506147b3929150614897565b5090565b604051806101200160405280600081526020016060815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016060815260200160608152602001606081525090565b8280548282559060005260206000209081019282156147a7579160200282015b828111156147a757825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061482c565b50805461486d90614f2a565b6000825580601f1061487d575050565b601f0160209004906000526020600020908101906143f291905b5b808211156147b35760008155600101614898565b6000602082840312156148be57600080fd5b81356001600160e01b03198116811461474757600080fd5b80356001600160a01b0381168114610c2357600080fd5b6000602082840312156148ff57600080fd5b614747826148d6565b6000806040838503121561491b57600080fd5b614924836148d6565b946020939093013593505050565b60005b8381101561494d578181015183820152602001614935565b50506000910152565b6000815180845261496e816020860160208601614932565b601f01601f19169290920160200192915050565b87815260e06020820152600061499b60e0830189614956565b6001600160a01b0388166040840152606083018790526080830186905260a0830185905282810360c08401526149d18185614956565b9a9950505050505050505050565b600081518084526020808501945080840160005b83811015614a185781516001600160a01b0316875295820195908201906001016149f3565b509495945050505050565b6000610120825184526020830151816020860152614a4382860182614956565b9150506040830151614a6060408601826001600160a01b03169052565b50606083015160608501526080830151608085015260a083015160a085015260c083015184820360c0860152614a968282614956565b91505060e083015184820360e0860152614ab082826149df565b9150506101008084015185830382870152614acb83826149df565b9695505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015614b2a57603f19888603018452614b18858351614a23565b94509285019290850190600101614afc565b5092979650505050505050565b600060208284031215614b4957600080fd5b5035919050565b60008060408385031215614b6357600080fd5b82359150614b73602084016148d6565b90509250929050565b60208152600061474760208301846149df565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715614bcd57614bcd614b8f565b604052919050565b600082601f830112614be657600080fd5b81356001600160401b03811115614bff57614bff614b8f565b614c12601f8201601f1916602001614ba5565b818152846020838601011115614c2757600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215614c5c57600080fd5b8535945060208601356001600160401b0380821115614c7a57600080fd5b614c8689838a01614bd5565b955060408801359450606088013593506080880135915080821115614caa57600080fd5b50614cb788828901614bd5565b9150509295509295909350565b600082601f830112614cd557600080fd5b813560206001600160401b03821115614cf057614cf0614b8f565b8160051b614cff828201614ba5565b9283528481018201928281019087851115614d1957600080fd5b83870192505b84831015614d3f57614d30836148d6565b82529183019190830190614d1f565b979650505050505050565b600060208284031215614d5c57600080fd5b81356001600160401b03811115614d7257600080fd5b614d7e84828501614cc4565b949350505050565b600080600080600060a08688031215614d9e57600080fd5b85356001600160401b0380821115614db557600080fd5b614dc189838a01614bd5565b965060208801359550604088013594506060880135915080821115614de557600080fd5b614df189838a01614bd5565b93506080880135915080821115614e0757600080fd5b50614cb788828901614cc4565b6020815260006147476020830184614956565b606081526000614e3a60608301866149df565b8281036020840152614e4c81866149df565b90508281036040840152614acb81856149df565b6020815260006147476020830184614a23565b6020808252825182820181905260009190848201906040850190845b8181101561373557835183529284019291840191600101614e8f565b60008060408385031215614ebe57600080fd5b50508035926020909101359150565b60208082526016908201527521b0b63632b91034b9903737ba1030b71030b236b4b760511b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600081614f2257614f22614efd565b506000190190565b600181811c90821680614f3e57607f821691505b602082108103614f5e57634e487b7160e01b600052602260045260246000fd5b50919050565b600060018201614f7657614f76614efd565b5060010190565b634e487b7160e01b600052603260045260246000fd5b60208082526010908201526f125b9d985b1a5908195d995b9d08125160821b604082015260600190565b601f82111561441a57600081815260208120601f850160051c81016020861015614fe45750805b601f850160051c820191505b8181101561500357828155600101614ff0565b505050505050565b81516001600160401b0381111561502457615024614b8f565b615038816150328454614f2a565b84614fbd565b602080601f83116001811461506d57600084156150555750858301515b600019600386901b1c1916600185901b178555615003565b600085815260208120601f198616915b8281101561509c5788860151825594840194600190910190840161507d565b50858210156150ba5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8082018082111561073257610732614efd565b6040815260006150f06040830185614956565b905060018060a01b03831660208301529392505050565b60c08152600061511a60c0830189614956565b87602084015286604084015282810360608401526151388187614956565b6080840195909552505060a00152949350505050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351615180816017850160208801614932565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516151b1816028840160208801614932565b01602801949350505050565b808202811582820484141761073257610732614efd56feb6a185f76b0ff8a0f9708ffce8e6b63ce2df58f28ad66179fb4e230e98d0a52f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19ba49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775829b824e2329e205435d941c9f13baf578548505283d29261236d8e6596d4636a26469706673582212200aaa0a4807af3afa96bfd763e37275f942ce759bad7a265fb64aa904e8b3dd7c64736f6c63430008130033a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a26469706673582212209be25506904c86c660c03ceadc8ac5f28c0be2bea61a5dbe743f7dfe78aa06de64736f6c63430008130033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200006a5760003560e01c80631eaf7b25146200006f57806320e4563714620000a05780633717366c14620000b957806337586c6414620000e95780638da5cb5b1462000102578063aa949da31462000116575b600080fd5b62000086620000803660046200049a565b6200012d565b604051620000979392919062000507565b60405180910390f35b620000b7620000b136600462000554565b620001ef565b005b620000d0620000ca36600462000622565b620002e3565b6040516001600160a01b03909116815260200162000097565b620000f36200030e565b6040516200009791906200063c565b600154620000d0906001600160a01b031681565b62000086620001273660046200049a565b62000372565b60026020819052600091825260409091208054600182015492820180546001600160a01b0392831694909216929162000166906200068b565b80601f016020809104026020016040519081016040528092919081815260200182805462000194906200068b565b8015620001e55780601f10620001b957610100808354040283529160200191620001e5565b820191906000526020600020905b815481529060010190602001808311620001c757829003601f168201915b5050505050905083565b6000828260405162000201906200046f565b6200020e929190620006c7565b604051809103906000f0801580156200022b573d6000803e3d6000fd5b5060008054600180820183557f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56390910180546001600160a01b03199081166001600160a01b0386811691821790935560408051606081018252898516815260208082018481528284018d81529489526002918290529290972081518154861690871617815591519582018054909416959094169490941790915551939450929091820190620002db908262000742565b505050505050565b60008181548110620002f457600080fd5b6000918252602090912001546001600160a01b0316905081565b606060008054806020026020016040519081016040528092919081815260200182805480156200036857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000349575b5050505050905090565b6001600160a01b0380821660009081526002602081815260408084208151606081810184528254881682526001830154909716938101939093529283018054949586959094869493909290840191620003cb906200068b565b80601f0160208091040260200160405190810160405280929190818152602001828054620003f9906200068b565b80156200044a5780601f106200041e576101008083540402835291602001916200044a565b820191906000526020600020905b8154815290600101906020018083116200042c57829003601f168201915b5050509190925250508151602083015160409093015190989297509550909350505050565b6156c2806200081083390190565b80356001600160a01b03811681146200049557600080fd5b919050565b600060208284031215620004ad57600080fd5b620004b8826200047d565b9392505050565b6000815180845260005b81811015620004e757602081850181015186830182015201620004c9565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b038481168252831660208201526060604082018190526000906200053590830184620004bf565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200056857600080fd5b823567ffffffffffffffff808211156200058157600080fd5b818501915085601f8301126200059657600080fd5b813581811115620005ab57620005ab6200053e565b604051601f8201601f19908116603f01168101908382118183101715620005d657620005d66200053e565b81604052828152886020848701011115620005f057600080fd5b82602086016020830137600060208483010152809650505050505062000619602084016200047d565b90509250929050565b6000602082840312156200063557600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156200067f5783516001600160a01b03168352928401929184019160010162000658565b50909695505050505050565b600181811c90821680620006a057607f821691505b602082108103620006c157634e487b7160e01b600052602260045260246000fd5b50919050565b604081526000620006dc6040830185620004bf565b905060018060a01b03831660208301529392505050565b601f8211156200073d57600081815260208120601f850160051c810160208610156200071c5750805b601f850160051c820191505b81811015620002db5782815560010162000728565b505050565b815167ffffffffffffffff8111156200075f576200075f6200053e565b62000777816200077084546200068b565b84620006f3565b602080601f831160018114620007af5760008415620007965750858301515b600019600386901b1c1916600185901b178555620002db565b600085815260208120601f198616915b82811015620007e057888601518255948401946001909101908401620007bf565b5085821015620007ff5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fe60806040523480156200001157600080fd5b50604051620056c2380380620056c28339810160408190526200003491620001c5565b60016200004283826200033c565b50600280546001600160a01b0383166001600160a01b0319918216811790925560038054909116909117905562000089600080516020620056a283398151915282620000e2565b620000b57f829b824e2329e205435d941c9f13baf578548505283d29261236d8e6596d463682620000e2565b620000d0600080516020620056a283398151915230620000e2565b50506001600855600060095562000408565b620000ee8282620000f2565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620000ee576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556200014e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620001c057600080fd5b919050565b60008060408385031215620001d957600080fd5b82516001600160401b0380821115620001f157600080fd5b818501915085601f8301126200020657600080fd5b8151818111156200021b576200021b62000192565b604051601f8201601f19908116603f0116810190838211818310171562000246576200024662000192565b816040528281526020935088848487010111156200026357600080fd5b600091505b8282101562000287578482018401518183018501529083019062000268565b6000848483010152809650505050620002a2818601620001a8565b925050509250929050565b600181811c90821680620002c257607f821691505b602082108103620002e357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200033757600081815260208120601f850160051c81016020861015620003125750805b601f850160051c820191505b8181101562000333578281556001016200031e565b5050505b505050565b81516001600160401b0381111562000358576200035862000192565b6200037081620003698454620002ad565b84620002e9565b602080601f831160018114620003a857600084156200038f5750858301515b600019600386901b1c1916600185901b17855562000333565b600085815260208120601f198616915b82811015620003d957888601518255948401946001909101908401620003b8565b5085821015620003f85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61528a80620004186000396000f3fe608060405234801561001057600080fd5b50600436106102b65760003560e01c806377ef09a011610172578063ba870686116100d9578063d5dd1b5011610092578063d5dd1b5014610664578063d98b88fa14610677578063ef44b47814610697578063ef7e1f68146106aa578063f71f67f4146106bd578063f8749a58146106c5578063fc3d2e46146106d857600080fd5b8063ba87068614610612578063bdfc98931461061b578063c1ce869b1461062e578063c27a500d14610636578063ca6d56dc1461063e578063d547741f1461065157600080fd5b806395fa6c501161012b57806395fa6c50146105a75780639c54df64146105ba578063a0cb1333146105cd578063a10f469e146105d5578063a217fddf146105ea578063b98079bc146105f257600080fd5b806377ef09a01461053957806378b2250f1461054c5780637dfbfb43146105555780638c5f24081461056857806391d148541461057d5780639516a1041461059057600080fd5b806336568abe116102215780635c7e8863116101da5780635c7e8863146104bb5780635e0e2804146104d057806369ca75fc146104e35780636d7524ee146104eb5780636dc4c2af146104fe5780636f4d469b1461051157806375b238fc1461052457600080fd5b806336568abe14610426578063365b98b214610439578063429b62e51461044c578063455f20dc14610475578063464c5b6c146104955780635136f358146104a857600080fd5b806311aee3801161027357806311aee380146103a8578063248a9ca3146103bf578063286482f9146103e25780632b7832b3146103f55780632f2ff15d146103fe5780632fd1949d1461041157600080fd5b806301ffc9a7146102bb57806308ae4b0c146102e35780630b1ca49a146103245780630eda85ee146103395780630f5c4a2b14610362578063110cd10014610388575b600080fd5b6102ce6102c93660046148ac565b610701565b60405190151581526020015b60405180910390f35b61030c6102f13660046148ed565b600c602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016102da565b6103376103323660046148ed565b610738565b005b61030c6103473660046148ed565b600b602052600090815260409020546001600160a01b031681565b610375610370366004614908565b6107db565b6040516102da9796959493929190614982565b61039b6103963660046148ed565b610959565b6040516102da9190614ad5565b6103b160085481565b6040519081526020016102da565b6103b16103cd366004614b37565b60009081526020819052604090206001015490565b61039b6103f03660046148ed565b610c28565b6103b160075481565b61033761040c366004614b50565b610f14565b610419611044565b6040516102da9190614b7c565b610337610434366004614b50565b611163565b61030c610447366004614b37565b6111dd565b61030c61045a3660046148ed565b600d602052600090815260409020546001600160a01b031681565b6103b16104833660046148ed565b60136020526000908152604090205481565b6103376104a3366004614b37565b611207565b6103376104b63660046148ed565b611381565b6103b16000805160206151d583398151915281565b6103756104de366004614908565b6114ba565b6104196114d6565b6103756104f9366004614b37565b611633565b61033761050c366004614c44565b611655565b61033761051f366004614d4a565b611886565b6103b160008051602061521583398151915281565b60025461030c906001600160a01b031681565b6103b160095481565b610337610563366004614d86565b611ade565b6105706120e1565b6040516102da9190614e14565b6102ce61058b366004614b50565b61216f565b610598612198565b6040516102da93929190614e27565b61030c6105b5366004614b37565b61252b565b6103376105c8366004614d4a565b61253b565b61039b612793565b6103b160008051602061523583398151915281565b6103b1600081565b610605610600366004614b37565b612c77565b6040516102da9190614e60565b6103b160065481565b610375610629366004614908565b613077565b61039b613093565b61039b61356c565b61033761064c3660046148ed565b613741565b61033761065f366004614b50565b61391a565b610375610672366004614908565b613a27565b61068a6106853660046148ed565b613a43565b6040516102da9190614e73565b61039b6106a53660046148ed565b613ab5565b61030c6106b8366004614eab565b613da0565b61039b613dd8565b6103376106d3366004614b37565b6142b1565b61030c6106e63660046148ed565b600a602052600090815260409020546001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b148061073257506301ffc9a760e01b6001600160e01b03198316145b92915050565b6107506000805160206152158339815191523361216f565b6107755760405162461bcd60e51b815260040161076c90614ecd565b60405180910390fd5b61078d6000805160206152358339815191528261391a565b6001600160a01b0381166000908152600c6020526040812080546001600160a01b0319168155906107c1600183018261474e565b5050600880549060006107d383614f13565b919050555050565b601260205281600052604060002081815481106107f757600080fd5b90600052602060002090600902016000915091505080600001549080600101805461082190614f2a565b80601f016020809104026020016040519081016040528092919081815260200182805461084d90614f2a565b801561089a5780601f1061086f5761010080835404028352916020019161089a565b820191906000526020600020905b81548152906001019060200180831161087d57829003601f168201915b505050600284015460038501546004860154600587015460068801805497986001600160a01b039095169793965091945092916108d690614f2a565b80601f016020809104026020016040519081016040528092919081815260200182805461090290614f2a565b801561094f5780601f106109245761010080835404028352916020019161094f565b820191906000526020600020905b81548152906001019060200180831161093257829003601f168201915b5050505050905087565b60606109736000805160206152158339815191523361216f565b61098f5760405162461bcd60e51b815260040161076c90614ecd565b6001600160a01b038216600090815260116020908152604080832080548251818502810185019093528083529193909284015b82821015610c1c57838290600052602060002090600902016040518061012001604052908160008201548152602001600182018054610a0090614f2a565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2c90614f2a565b8015610a795780601f10610a4e57610100808354040283529160200191610a79565b820191906000526020600020905b815481529060010190602001808311610a5c57829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260068201805460a090920191610ac790614f2a565b80601f0160208091040260200160405190810160405280929190818152602001828054610af390614f2a565b8015610b405780601f10610b1557610100808354040283529160200191610b40565b820191906000526020600020905b815481529060010190602001808311610b2357829003601f168201915b5050505050815260200160078201805480602002602001604051908101604052809291908181526020018280548015610ba257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b84575b5050505050815260200160088201805480602002602001604051908101604052809291908181526020018280548015610c0457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610be6575b505050505081525050815260200190600101906109c2565b5050505090505b919050565b6060610c426000805160206152358339815191523361216f565b610c875760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba10309036b2b6b132b960511b604482015260640161076c565b6001600160a01b038216600090815260126020908152604080832080548251818502810185019093528083529193909284015b82821015610c1c57838290600052602060002090600902016040518061012001604052908160008201548152602001600182018054610cf890614f2a565b80601f0160208091040260200160405190810160405280929190818152602001828054610d2490614f2a565b8015610d715780601f10610d4657610100808354040283529160200191610d71565b820191906000526020600020905b815481529060010190602001808311610d5457829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260068201805460a090920191610dbf90614f2a565b80601f0160208091040260200160405190810160405280929190818152602001828054610deb90614f2a565b8015610e385780601f10610e0d57610100808354040283529160200191610e38565b820191906000526020600020905b815481529060010190602001808311610e1b57829003601f168201915b5050505050815260200160078201805480602002602001604051908101604052809291908181526020018280548015610e9a57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610e7c575b5050505050815260200160088201805480602002602001604051908101604052809291908181526020018280548015610efc57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ede575b50505050508152505081526020019060010190610cba565b610f2c6000805160206152158339815191523361216f565b610f485760405162461bcd60e51b815260040161076c90614ecd565b610f606000805160206152158339815191523361216f565b610f7c5760405162461bcd60e51b815260040161076c90614ecd565b610f8682826143f5565b600080516020615235833981519152820361101b576040805180820182526001600160a01b038381168083528351600080825260208083018752808601928352928152600c835294909420835181546001600160a01b03191693169290921782559251805192939192610fff926001850192019061476c565b5050600880549150600061101283614f64565b91905055505050565b6000805160206151d58339815191528203611040576009805490600061101283614f64565b5050565b606060006008546001600160401b0381111561106257611062614b8f565b60405190808252806020026020018201604052801561108b578160200160208202803683370190505b5090506000805b60045481101561115b576110db600080516020615235833981519152600483815481106110c1576110c1614f7d565b6000918252602090912001546001600160a01b031661216f565b1561114957600481815481106110f3576110f3614f7d565b9060005260206000200160009054906101000a90046001600160a01b031683838151811061112357611123614f7d565b6001600160a01b03909216602092830291909101909101528161114581614f64565b9250505b8061115381614f64565b915050611092565b509092915050565b6001600160a01b03811633146111d35760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161076c565b611040828261441f565b600481815481106111ed57600080fd5b6000918252602090912001546001600160a01b0316905081565b61121f6000805160206152358339815191523361216f565b8061123d575061123d6000805160206152158339815191523361216f565b61129f5760405162461bcd60e51b815260206004820152602d60248201527f4f6e6c79206d656d62657273206f722061646d696e732063616e20616363657060448201526c7420696e7669746174696f6e7360981b606482015260840161076c565b60006112aa33613a43565b90506000805b82518110156112f457838382815181106112cc576112cc614f7d565b6020026020010151036112e257600191506112f4565b806112ec81614f64565b9150506112b0565b508061134c5760405162461bcd60e51b815260206004820152602160248201527f596f7520617265206e6f7420696e766974656420746f2074686973206576656e6044820152601d60fa1b606482015260840161076c565b50506000908152600e602090815260408220600801805460018101825590835291200180546001600160a01b03191633179055565b6113996000805160206151d583398151915282614484565b6040805180820182526001600160a01b038381168083528351600080825260208083018752808601928352928152600b835294909420835181546001600160a01b031916931692909217825592518051929391926113fd926001850192019061476c565b5050600980549150600061141083614f64565b91905055506000805b60045481101561147557826001600160a01b03166004828154811061144057611440614f7d565b6000918252602090912001546001600160a01b0316036114635760019150611475565b8061146d81614f64565b915050611419565b508061104057600480546001810182556000919091526000805160206151f58339815191520180546001600160a01b0384166001600160a01b03199091161790555050565b601060205281600052604060002081815481106107f757600080fd5b60606000805b6004548110156115305761150b6000805160206151d5833981519152600483815481106110c1576110c1614f7d565b1561151e578161151a81614f64565b9250505b8061152881614f64565b9150506114dc565b506000816001600160401b0381111561154b5761154b614b8f565b604051908082528060200260200182016040528015611574578160200160208202803683370190505b5090506000805b60045481101561162a576115aa6000805160206151d5833981519152600483815481106110c1576110c1614f7d565b1561161857600481815481106115c2576115c2614f7d565b9060005260206000200160009054906101000a90046001600160a01b03168383815181106115f2576115f2614f7d565b6001600160a01b03909216602092830291909101909101528161161481614f64565b9250505b8061162281614f64565b91505061157b565b50909392505050565b600e602052600090815260409020805460018201805491929161082190614f2a565b61166d6000805160206151d58339815191523361216f565b8061168b575061168b6000805160206152358339815191523361216f565b806116a957506116a96000805160206152158339815191523361216f565b6117035760405162461bcd60e51b815260206004820152602560248201527f43616c6c6572206973206e6f74206120757365722c206d656d626572206f722060448201526430b236b4b760d91b606482015260840161076c565b61171b6000805160206151d58339815191523361216f565b156117b457336000908152600f6020526040902054851061174e5760405162461bcd60e51b815260040161076c90614f93565b336000908152600f6020526040812080548790811061176f5761176f614f7d565b9060005260206000209060090201905084816001019081611790919061500b565b506003810184905560048101839055600681016117ad838261500b565b505061187f565b6117cc6000805160206152358339815191523361216f565b806117ea57506117ea6000805160206152158339815191523361216f565b1561187f5733600090815260126020526040902054851061181d5760405162461bcd60e51b815260040161076c90614f93565b33600090815260126020526040812080548790811061183e5761183e614f7d565b906000526020600020906009020190508481600101908161185f919061500b565b5060038101849055600481018390556006810161187c838261500b565b50505b5050505050565b61189e6000805160206152158339815191523361216f565b6118ba5760405162461bcd60e51b815260040161076c90614ecd565b60005b81518110156110405760008282815181106118da576118da614f7d565b602002602001015190506118fc60008051602061523583398151915282614484565b6040805180820182526001600160a01b038381168083528351600080825260208083018752808601928352928152600c835294909420835181546001600160a01b03191693169290921782559251805192939192611960926001850192019061476c565b5050600880549150600061197383614f64565b91905055506119906000805160206151d58339815191528261216f565b611a29576119ac6000805160206151d583398151915282614484565b6040805180820182526001600160a01b038381168083528351600080825260208083018752808601928352928152600b835294909420835181546001600160a01b03191693169290921782559251805192939192611a10926001850192019061476c565b50506009805491506000611a2383614f64565b91905055505b6000805b600454811015611a8957826001600160a01b031660048281548110611a5457611a54614f7d565b6000918252602090912001546001600160a01b031603611a775760019150611a89565b80611a8181614f64565b915050611a2d565b5080611ac957600480546001810182556000919091526000805160206151f58339815191520180546001600160a01b0319166001600160a01b0384161790555b50508080611ad690614f64565b9150506118bd565b611af66000805160206152358339815191523361216f565b158015611b185750611b166000805160206152158339815191523361216f565b155b8015611b395750611b376000805160206151d58339815191523361216f565b155b15611b5d57611b4733611381565b60098054906000611b5783614f64565b91905055505b611b656147b7565b600654611b739060016150ca565b81526020810186905260608101859052608081018490523360408201524260a082015260c0810183905260e081018290526000604051908082528060200260200182016040528015611bcf578160200160208202803683370190505b50610100820152611bee6000805160206152358339815191523361216f565b80611c0c5750611c0c6000805160206152158339815191523361216f565b15611d1457336000908152601260209081526040822080546001818101835591845292829020845160099094020192835590830151839291820190611c51908261500b565b5060408201516002820180546001600160a01b0319166001600160a01b03909216919091179055606082015160038201556080820151600482015560a0820151600582015560c08201516006820190611caa908261500b565b5060e08201518051611cc691600784019160209091019061480c565b506101008201518051611ce391600884019160209091019061480c565b5050336000908152600c60209081526040822084516001918201805492830181558452919092209091015550611ee8565b336000908152600f60209081526040822080546001818101835591845292829020845160099094020192835590830151839291820190611d54908261500b565b5060408201516002820180546001600160a01b0319166001600160a01b03909216919091179055606082015160038201556080820151600482015560a0820151600582015560c08201516006820190611dad908261500b565b5060e08201518051611dc991600784019160209091019061480c565b506101008201518051611de691600884019160209091019061480c565b505033600090815260106020908152604082208054600181810183559184529282902085516009909402019283559084015184935090820190611e29908261500b565b5060408201516002820180546001600160a01b0319166001600160a01b03909216919091179055606082015160038201556080820151600482015560a0820151600582015560c08201516006820190611e82908261500b565b5060e08201518051611e9e91600784019160209091019061480c565b506101008201518051611ebb91600884019160209091019061480c565b5050336000908152600b602090815260408220845160019182018054928301815584529190922090910155505b805160068054906000611efa83614f64565b90915550506005805460018101825560009182527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b031916331790555b835181101561201b576000848281518110611f5e57611f5e614f7d565b60209081029190910181015160008581526014835260408082208054600180820183559184528584200180546001600160a01b0386166001600160a01b03199182168117909255818552600a875292842080549093161782559081018054918201815582529290209091018490559050827fd48873c66feece7bbf3cbcd8d14102600b7da47eac54823e0441effd7da44c5e8a836040516120009291906150dd565b60405180910390a2508061201381614f64565b915050611f41565b506000805160206152358339815191526120436000805160206152158339815191523361216f565b1561205d575060008051602061521583398151915261208b565b6120756000805160206151d58339815191523361216f565b1561208b57506000805160206151d58339815191525b336001600160a01b0316827fb0cd684d8e2468fcd73b7ad59b2b57f99cc49f0a2f66ea314ecc7da59c83b8378a8a8a8a42886040516120cf96959493929190615107565b60405180910390a35050505050505050565b600180546120ee90614f2a565b80601f016020809104026020016040519081016040528092919081815260200182805461211a90614f2a565b80156121675780601f1061213c57610100808354040283529160200191612167565b820191906000526020600020905b81548152906001019060200180831161214a57829003601f168201915b505050505081565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60608060606000806000805b600454811015612268576121d3600080516020615215833981519152600483815481106110c1576110c1614f7d565b156121e657836121e281614f64565b9450505b61220b600080516020615235833981519152600483815481106110c1576110c1614f7d565b1561221e578261221a81614f64565b9350505b6122436000805160206151d5833981519152600483815481106110c1576110c1614f7d565b15612256578161225281614f64565b9250505b8061226081614f64565b9150506121a4565b506000836001600160401b0381111561228357612283614b8f565b6040519080825280602002602001820160405280156122ac578160200160208202803683370190505b5090506000836001600160401b038111156122c9576122c9614b8f565b6040519080825280602002602001820160405280156122f2578160200160208202803683370190505b5090506000836001600160401b0381111561230f5761230f614b8f565b604051908082528060200260200182016040528015612338578160200160208202803683370190505b5090506000806000805b60045481101561251757612371600080516020615215833981519152600483815481106110c1576110c1614f7d565b156123df576004818154811061238957612389614f7d565b9060005260206000200160009054906101000a90046001600160a01b03168785815181106123b9576123b9614f7d565b6001600160a01b0390921660209283029190910190910152836123db81614f64565b9450505b612404600080516020615235833981519152600483815481106110c1576110c1614f7d565b15612472576004818154811061241c5761241c614f7d565b9060005260206000200160009054906101000a90046001600160a01b031686848151811061244c5761244c614f7d565b6001600160a01b03909216602092830291909101909101528261246e81614f64565b9350505b6124976000805160206151d5833981519152600483815481106110c1576110c1614f7d565b1561250557600481815481106124af576124af614f7d565b9060005260206000200160009054906101000a90046001600160a01b03168583815181106124df576124df614f7d565b6001600160a01b03909216602092830291909101909101528161250181614f64565b9250505b8061250f81614f64565b915050612342565b50949b939a50919850919650505050505050565b600581815481106111ed57600080fd5b6125536000805160206152158339815191523361216f565b61256f5760405162461bcd60e51b815260040161076c90614ecd565b60005b815181101561104057600082828151811061258f5761258f614f7d565b602002602001015190506125b160008051602061521583398151915282614484565b6040805180820182526001600160a01b038381168083528351600080825260208083018752808601928352928152600d835294909420835181546001600160a01b03191693169290921782559251805192939192612615926001850192019061476c565b5050600780549150600061262883614f64565b91905055506126456000805160206152358339815191528261216f565b6126de5761266160008051602061523583398151915282614484565b6040805180820182526001600160a01b038381168083528351600080825260208083018752808601928352928152600c835294909420835181546001600160a01b031916931692909217825592518051929391926126c5926001850192019061476c565b505060088054915060006126d883614f64565b91905055505b6000805b60045481101561273e57826001600160a01b03166004828154811061270957612709614f7d565b6000918252602090912001546001600160a01b03160361272c576001915061273e565b8061273681614f64565b9150506126e2565b508061277e57600480546001810182556000919091526000805160206151f58339815191520180546001600160a01b0319166001600160a01b0384161790555b5050808061278b90614f64565b915050612572565b60606000806004805490506001600160401b038111156127b5576127b5614b8f565b6040519080825280602002602001820160405280156127de578160200160208202803683370190505b5090506000805b6004548110156128dc576128146000805160206151d5833981519152600483815481106110c1576110c1614f7d565b156128ca576004818154811061282c5761282c614f7d565b9060005260206000200160009054906101000a90046001600160a01b031683838151811061285c5761285c614f7d565b6001600160a01b03909216602092830291909101909101528161287e81614f64565b925050601060006004838154811061289857612898614f7d565b60009182526020808320909101546001600160a01b031683528201929092526040019020546128c790856150ca565b93505b806128d481614f64565b9150506127e5565b506000836001600160401b038111156128f7576128f7614b8f565b60405190808252806020026020018201604052801561293057816020015b61291d6147b7565b8152602001906001900390816129155790505b5090506000805b83811015612c6c5760005b6010600087848151811061295857612958614f7d565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002080549050811015612c5957601060008784815181106129a1576129a1614f7d565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081815481106129da576129da614f7d565b90600052602060002090600902016040518061012001604052908160008201548152602001600182018054612a0e90614f2a565b80601f0160208091040260200160405190810160405280929190818152602001828054612a3a90614f2a565b8015612a875780601f10612a5c57610100808354040283529160200191612a87565b820191906000526020600020905b815481529060010190602001808311612a6a57829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260068201805460a090920191612ad590614f2a565b80601f0160208091040260200160405190810160405280929190818152602001828054612b0190614f2a565b8015612b4e5780601f10612b2357610100808354040283529160200191612b4e565b820191906000526020600020905b815481529060010190602001808311612b3157829003601f168201915b5050505050815260200160078201805480602002602001604051908101604052809291908181526020018280548015612bb057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612b92575b5050505050815260200160088201805480602002602001604051908101604052809291908181526020018280548015612c1257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612bf4575b505050505081525050848481518110612c2d57612c2d614f7d565b60200260200101819052508280612c4390614f64565b9350508080612c5190614f64565b915050612942565b5080612c6481614f64565b915050612937565b509095945050505050565b612c7f6147b7565b60005b60055481101561303c576000612cb3600080516020615235833981519152600584815481106110c1576110c1614f7d565b15612cfa576012600060058481548110612ccf57612ccf614f7d565b60009182526020808320909101546001600160a01b0316835282019290925260400190209050612d82565b612d1f6000805160206151d5833981519152600584815481106110c1576110c1614f7d565b15612d3b576010600060058481548110612ccf57612ccf614f7d565b612d60600080516020615215833981519152600584815481106110c1576110c1614f7d565b15612d7c576011600060058481548110612ccf57612ccf614f7d565b5061302a565b60005b81548110156130275784828281548110612da157612da1614f7d565b9060005260206000209060090201600001540361301557818181548110612dca57612dca614f7d565b90600052602060002090600902016040518061012001604052908160008201548152602001600182018054612dfe90614f2a565b80601f0160208091040260200160405190810160405280929190818152602001828054612e2a90614f2a565b8015612e775780601f10612e4c57610100808354040283529160200191612e77565b820191906000526020600020905b815481529060010190602001808311612e5a57829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260068201805460a090920191612ec590614f2a565b80601f0160208091040260200160405190810160405280929190818152602001828054612ef190614f2a565b8015612f3e5780601f10612f1357610100808354040283529160200191612f3e565b820191906000526020600020905b815481529060010190602001808311612f2157829003601f168201915b5050505050815260200160078201805480602002602001604051908101604052809291908181526020018280548015612fa057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612f82575b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561300257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612fe4575b5050505050815250509350505050919050565b8061301f81614f64565b915050612d85565b50505b8061303481614f64565b915050612c82565b5060405162461bcd60e51b815260206004820152600f60248201526e115d995b9d081b9bdd08199bdd5b99608a1b604482015260640161076c565b600f60205281600052604060002081815481106107f757600080fd5b60606000806004805490506001600160401b038111156130b5576130b5614b8f565b6040519080825280602002602001820160405280156130de578160200160208202803683370190505b5090506000805b6004548110156131dc57613114600080516020615235833981519152600483815481106110c1576110c1614f7d565b156131ca576004818154811061312c5761312c614f7d565b9060005260206000200160009054906101000a90046001600160a01b031683838151811061315c5761315c614f7d565b6001600160a01b03909216602092830291909101909101528161317e81614f64565b925050601260006004838154811061319857613198614f7d565b60009182526020808320909101546001600160a01b031683528201929092526040019020546131c790856150ca565b93505b806131d481614f64565b9150506130e5565b506000836001600160401b038111156131f7576131f7614b8f565b60405190808252806020026020018201604052801561323057816020015b61321d6147b7565b8152602001906001900390816132155790505b5090506000805b83811015612c6c5760005b6012600087848151811061325857613258614f7d565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208054905081101561355957601260008784815181106132a1576132a1614f7d565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081815481106132da576132da614f7d565b9060005260206000209060090201604051806101200160405290816000820154815260200160018201805461330e90614f2a565b80601f016020809104026020016040519081016040528092919081815260200182805461333a90614f2a565b80156133875780601f1061335c57610100808354040283529160200191613387565b820191906000526020600020905b81548152906001019060200180831161336a57829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260068201805460a0909201916133d590614f2a565b80601f016020809104026020016040519081016040528092919081815260200182805461340190614f2a565b801561344e5780601f106134235761010080835404028352916020019161344e565b820191906000526020600020905b81548152906001019060200180831161343157829003601f168201915b50505050508152602001600782018054806020026020016040519081016040528092919081815260200182805480156134b057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613492575b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561351257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116134f4575b50505050508152505084848151811061352d5761352d614f7d565b6020026020010181905250828061354390614f64565b935050808061355190614f64565b915050613242565b508061356481614f64565b915050613237565b60606000613578613093565b90506000613584612793565b90506000613590613dd8565b905060008151835185516135a491906150ca565b6135ae91906150ca565b90506000816001600160401b038111156135ca576135ca614b8f565b60405190808252806020026020018201604052801561360357816020015b6135f06147b7565b8152602001906001900390816135e85790505b5090506000805b865181101561366b5786818151811061362557613625614f7d565b602002602001015183838151811061363f5761363f614f7d565b6020026020010181905250818061365590614f64565b925050808061366390614f64565b91505061360a565b5060005b85518110156136d05785818151811061368a5761368a614f7d565b60200260200101518383815181106136a4576136a4614f7d565b602002602001018190525081806136ba90614f64565b92505080806136c890614f64565b91505061366f565b5060005b8451811015613735578481815181106136ef576136ef614f7d565b602002602001015183838151811061370957613709614f7d565b6020026020010181905250818061371f90614f64565b925050808061372d90614f64565b9150506136d4565b50909695505050505050565b6137596000805160206152158339815191523361216f565b6137755760405162461bcd60e51b815260040161076c90614ecd565b61378d60008051602061523583398151915282614484565b6040805180820182526001600160a01b038381168083528351600080825260208083018752808601928352928152600c835294909420835181546001600160a01b031916931692909217825592518051929391926137f1926001850192019061476c565b5050600880549150600061380483614f64565b91905055506138216000805160206151d58339815191528261216f565b6138ba5761383d6000805160206151d583398151915282614484565b6040805180820182526001600160a01b038381168083528351600080825260208083018752808601928352928152600b835294909420835181546001600160a01b031916931692909217825592518051929391926138a1926001850192019061476c565b505060098054915060006138b483614f64565b91905055505b6000805b60045481101561147557826001600160a01b0316600482815481106138e5576138e5614f7d565b6000918252602090912001546001600160a01b0316036139085760019150611475565b8061391281614f64565b9150506138be565b6139326000805160206152158339815191523361216f565b61394e5760405162461bcd60e51b815260040161076c90614ecd565b6139666000805160206152158339815191523361216f565b6139825760405162461bcd60e51b815260040161076c90614ecd565b61398c828261448e565b6139a46000805160206152158339815191528261216f565b1580156139c457506139c46000805160206152358339815191528261216f565b15611040576139e16000805160206152358339815191528261391a565b6001600160a01b0381166000908152600c6020526040812080546001600160a01b031916815590613a15600183018261474e565b50506008805490600061101283614f13565b601160205281600052604060002081815481106107f757600080fd5b6001600160a01b0381166000908152600a60209081526040918290206001810180548451818502810185019095528085526060949293830182828015613aa857602002820191906000526020600020905b815481526020019060010190808311613a94575b5050505050915050919050565b6060613acf6000805160206151d58339815191528361216f565b613b135760405162461bcd60e51b815260206004820152601560248201527410d85b1b195c881a5cc81b9bdd08184819dd595cdd605a1b604482015260640161076c565b6001600160a01b038216600090815260106020908152604080832080548251818502810185019093528083529193909284015b82821015610c1c57838290600052602060002090600902016040518061012001604052908160008201548152602001600182018054613b8490614f2a565b80601f0160208091040260200160405190810160405280929190818152602001828054613bb090614f2a565b8015613bfd5780601f10613bd257610100808354040283529160200191613bfd565b820191906000526020600020905b815481529060010190602001808311613be057829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260068201805460a090920191613c4b90614f2a565b80601f0160208091040260200160405190810160405280929190818152602001828054613c7790614f2a565b8015613cc45780601f10613c9957610100808354040283529160200191613cc4565b820191906000526020600020905b815481529060010190602001808311613ca757829003601f168201915b5050505050815260200160078201805480602002602001604051908101604052809291908181526020018280548015613d2657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613d08575b5050505050815260200160088201805480602002602001604051908101604052809291908181526020018280548015613d8857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613d6a575b50505050508152505081526020019060010190613b46565b60146020528160005260406000208181548110613dbc57600080fd5b6000918252602090912001546001600160a01b03169150829050565b60606000806004805490506001600160401b03811115613dfa57613dfa614b8f565b604051908082528060200260200182016040528015613e23578160200160208202803683370190505b5090506000805b600454811015613f2157613e59600080516020615215833981519152600483815481106110c1576110c1614f7d565b15613f0f5760048181548110613e7157613e71614f7d565b9060005260206000200160009054906101000a90046001600160a01b0316838381518110613ea157613ea1614f7d565b6001600160a01b039092166020928302919091019091015281613ec381614f64565b9250506011600060048381548110613edd57613edd614f7d565b60009182526020808320909101546001600160a01b03168352820192909252604001902054613f0c90856150ca565b93505b80613f1981614f64565b915050613e2a565b506000836001600160401b03811115613f3c57613f3c614b8f565b604051908082528060200260200182016040528015613f7557816020015b613f626147b7565b815260200190600190039081613f5a5790505b5090506000805b83811015612c6c5760005b60116000878481518110613f9d57613f9d614f7d565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208054905081101561429e5760116000878481518110613fe657613fe6614f7d565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020818154811061401f5761401f614f7d565b9060005260206000209060090201604051806101200160405290816000820154815260200160018201805461405390614f2a565b80601f016020809104026020016040519081016040528092919081815260200182805461407f90614f2a565b80156140cc5780601f106140a1576101008083540402835291602001916140cc565b820191906000526020600020905b8154815290600101906020018083116140af57829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260068201805460a09092019161411a90614f2a565b80601f016020809104026020016040519081016040528092919081815260200182805461414690614f2a565b80156141935780601f1061416857610100808354040283529160200191614193565b820191906000526020600020905b81548152906001019060200180831161417657829003601f168201915b50505050508152602001600782018054806020026020016040519081016040528092919081815260200182805480156141f557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116141d7575b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561425757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311614239575b50505050508152505084848151811061427257614272614f7d565b6020026020010181905250828061428890614f64565b935050808061429690614f64565b915050613f87565b50806142a981614f64565b915050613f7c565b6142c96000805160206152158339815191523361216f565b61430d5760405162461bcd60e51b815260206004820152601560248201527421b0b63632b91034b9903737ba10309030b236b4b760591b604482015260640161076c565b6143256000805160206152158339815191523361216f565b156143f2573360009081526012602052604090205481106143585760405162461bcd60e51b815260040161076c90614f93565b336000908152601260205260409020805481908390811061437b5761437b614f7d565b6000918252602082206009909102018181559061439b6001830182614861565b6002820180546001600160a01b031916905560006003830181905560048301819055600583018190556143d2906006840190614861565b6143e060078301600061474e565b6143ee60088301600061474e565b5050505b50565b600082815260208190526040902060010154614410816144b3565b61441a83836144bd565b505050565b614429828261216f565b15611040576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61104082826144bd565b6000828152602081905260409020600101546144a9816144b3565b61441a838361441f565b6143f28133614541565b6144c7828261216f565b611040576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556144fd3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61454b828261216f565b611040576145588161459a565b6145638360206145ac565b60405160200161457492919061514e565b60408051601f198184030181529082905262461bcd60e51b825261076c91600401614e14565b60606107326001600160a01b03831660145b606060006145bb8360026151bd565b6145c69060026150ca565b6001600160401b038111156145dd576145dd614b8f565b6040519080825280601f01601f191660200182016040528015614607576020820181803683370190505b509050600360fc1b8160008151811061462257614622614f7d565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061465157614651614f7d565b60200101906001600160f81b031916908160001a90535060006146758460026151bd565b6146809060016150ca565b90505b60018111156146f8576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106146b4576146b4614f7d565b1a60f81b8282815181106146ca576146ca614f7d565b60200101906001600160f81b031916908160001a90535060049490941c936146f181614f13565b9050614683565b5083156147475760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161076c565b9392505050565b50805460008255906000526020600020908101906143f29190614897565b8280548282559060005260206000209081019282156147a7579160200282015b828111156147a757825182559160200191906001019061478c565b506147b3929150614897565b5090565b604051806101200160405280600081526020016060815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016060815260200160608152602001606081525090565b8280548282559060005260206000209081019282156147a7579160200282015b828111156147a757825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061482c565b50805461486d90614f2a565b6000825580601f1061487d575050565b601f0160209004906000526020600020908101906143f291905b5b808211156147b35760008155600101614898565b6000602082840312156148be57600080fd5b81356001600160e01b03198116811461474757600080fd5b80356001600160a01b0381168114610c2357600080fd5b6000602082840312156148ff57600080fd5b614747826148d6565b6000806040838503121561491b57600080fd5b614924836148d6565b946020939093013593505050565b60005b8381101561494d578181015183820152602001614935565b50506000910152565b6000815180845261496e816020860160208601614932565b601f01601f19169290920160200192915050565b87815260e06020820152600061499b60e0830189614956565b6001600160a01b0388166040840152606083018790526080830186905260a0830185905282810360c08401526149d18185614956565b9a9950505050505050505050565b600081518084526020808501945080840160005b83811015614a185781516001600160a01b0316875295820195908201906001016149f3565b509495945050505050565b6000610120825184526020830151816020860152614a4382860182614956565b9150506040830151614a6060408601826001600160a01b03169052565b50606083015160608501526080830151608085015260a083015160a085015260c083015184820360c0860152614a968282614956565b91505060e083015184820360e0860152614ab082826149df565b9150506101008084015185830382870152614acb83826149df565b9695505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015614b2a57603f19888603018452614b18858351614a23565b94509285019290850190600101614afc565b5092979650505050505050565b600060208284031215614b4957600080fd5b5035919050565b60008060408385031215614b6357600080fd5b82359150614b73602084016148d6565b90509250929050565b60208152600061474760208301846149df565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715614bcd57614bcd614b8f565b604052919050565b600082601f830112614be657600080fd5b81356001600160401b03811115614bff57614bff614b8f565b614c12601f8201601f1916602001614ba5565b818152846020838601011115614c2757600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215614c5c57600080fd5b8535945060208601356001600160401b0380821115614c7a57600080fd5b614c8689838a01614bd5565b955060408801359450606088013593506080880135915080821115614caa57600080fd5b50614cb788828901614bd5565b9150509295509295909350565b600082601f830112614cd557600080fd5b813560206001600160401b03821115614cf057614cf0614b8f565b8160051b614cff828201614ba5565b9283528481018201928281019087851115614d1957600080fd5b83870192505b84831015614d3f57614d30836148d6565b82529183019190830190614d1f565b979650505050505050565b600060208284031215614d5c57600080fd5b81356001600160401b03811115614d7257600080fd5b614d7e84828501614cc4565b949350505050565b600080600080600060a08688031215614d9e57600080fd5b85356001600160401b0380821115614db557600080fd5b614dc189838a01614bd5565b965060208801359550604088013594506060880135915080821115614de557600080fd5b614df189838a01614bd5565b93506080880135915080821115614e0757600080fd5b50614cb788828901614cc4565b6020815260006147476020830184614956565b606081526000614e3a60608301866149df565b8281036020840152614e4c81866149df565b90508281036040840152614acb81856149df565b6020815260006147476020830184614a23565b6020808252825182820181905260009190848201906040850190845b8181101561373557835183529284019291840191600101614e8f565b60008060408385031215614ebe57600080fd5b50508035926020909101359150565b60208082526016908201527521b0b63632b91034b9903737ba1030b71030b236b4b760511b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600081614f2257614f22614efd565b506000190190565b600181811c90821680614f3e57607f821691505b602082108103614f5e57634e487b7160e01b600052602260045260246000fd5b50919050565b600060018201614f7657614f76614efd565b5060010190565b634e487b7160e01b600052603260045260246000fd5b60208082526010908201526f125b9d985b1a5908195d995b9d08125160821b604082015260600190565b601f82111561441a57600081815260208120601f850160051c81016020861015614fe45750805b601f850160051c820191505b8181101561500357828155600101614ff0565b505050505050565b81516001600160401b0381111561502457615024614b8f565b615038816150328454614f2a565b84614fbd565b602080601f83116001811461506d57600084156150555750858301515b600019600386901b1c1916600185901b178555615003565b600085815260208120601f198616915b8281101561509c5788860151825594840194600190910190840161507d565b50858210156150ba5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8082018082111561073257610732614efd565b6040815260006150f06040830185614956565b905060018060a01b03831660208301529392505050565b60c08152600061511a60c0830189614956565b87602084015286604084015282810360608401526151388187614956565b6080840195909552505060a00152949350505050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351615180816017850160208801614932565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516151b1816028840160208801614932565b01602801949350505050565b808202811582820484141761073257610732614efd56feb6a185f76b0ff8a0f9708ffce8e6b63ce2df58f28ad66179fb4e230e98d0a52f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19ba49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775829b824e2329e205435d941c9f13baf578548505283d29261236d8e6596d4636a26469706673582212200aaa0a4807af3afa96bfd763e37275f942ce759bad7a265fb64aa904e8b3dd7c64736f6c63430008130033a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a26469706673582212209be25506904c86c660c03ceadc8ac5f28c0be2bea61a5dbe743f7dfe78aa06de64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3893,
        "contract": "contracts/CalendarFactory.sol:CalendarFactory",
        "label": "calAddressArray",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3895,
        "contract": "contracts/CalendarFactory.sol:CalendarFactory",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3900,
        "contract": "contracts/CalendarFactory.sol:CalendarFactory",
        "label": "calendar",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Calendar)3907_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Calendar)3907_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CalendarFactory.Calendar)",
        "numberOfBytes": "32",
        "value": "t_struct(Calendar)3907_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Calendar)3907_storage": {
        "encoding": "inplace",
        "label": "struct CalendarFactory.Calendar",
        "members": [
          {
            "astId": 3902,
            "contract": "contracts/CalendarFactory.sol:CalendarFactory",
            "label": "calendarAdmin",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3904,
            "contract": "contracts/CalendarFactory.sol:CalendarFactory",
            "label": "calendarAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3906,
            "contract": "contracts/CalendarFactory.sol:CalendarFactory",
            "label": "calendarName",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      }
    }
  }
}